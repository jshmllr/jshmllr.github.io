'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Rx = require('rxjs/Rx');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createIntentStream = (events$, intentConfig) => {
  const intentEvents$ = events$.filter(message => {
    return message.type === 'INTENT';
  });

  const scopedEvents$ = intentEvents$.filter(message => {
    return intentConfig.scopes.includes(message.scope);
  });

  const handlers$ = scopedEvents$.map(({ payload, resolve, reject }) => {
    return {
      handler: intentConfig.intents[payload.code],
      payload,
      resolve,
      reject
    };
  });

  return handlers$;
};

class IntentSystem {
  constructor() {
    this.handlersStream = new _Rx.Subject();
    this.handlersStream.subscribe(({ handler, payload, resolve, reject }) => {
      _bluebird2.default.try(() => {
        return handler(payload);
      }).then(resolve).catch(reject);
    });

    this.handlers = [];
  }

  addHandler(intentHandler) {
    this.handlers.push(intentHandler);
  }

  connect(events$) {
    const intentStreams = this.handlers.map(createIntentStream.bind(null, events$));
    const handlers$ = _Rx.Observable.merge(...intentStreams);

    handlers$.subscribe(this.handlersStream);
  }
}

exports.default = IntentSystem;