'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _os = require('os');

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _create = require('../cmds/space_cmds/accesstoken_cmds/create');

var _context = require('../context');

var _github = require('../utils/github');

var _log = require('../utils/log');

var _text = require('../utils/text');

var _styles = require('../utils/styles');

var _emojis = require('../utils/emojis');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function setupStep(guideContext) {
  guideContext.stepCount++;

  const { stepCount, spaceId, activeGuide } = guideContext;

  (0, _log.log)();
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.wrappedLog)(`${(0, _emojis.generateNumberEmoji)(stepCount)} Set up a ${activeGuide.name} to display your content`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.log)();
  (0, _log.log)(`Weâ€™ll now download the latest version of the ${activeGuide.name} source to your machine. Just select a directory name, a destination, and we can continue.`);
  (0, _log.log)();
  const directoryNameAnswer = await _inquirer2.default.prompt([{
    type: 'input',
    name: 'directoryName',
    message: 'The directory should be called:',
    default: activeGuide.directoryName
  }]);

  const { directoryName } = directoryNameAnswer;

  const directoryPathAnswer = await _inquirer2.default.prompt([{
    type: 'directory',
    name: 'directoryPath',
    message: `Where should the '${(0, _styles.highlightStyle)(directoryName)}' directory be located?`,
    basePath: (0, _os.homedir)()
  }]);

  const { directoryPath } = directoryPathAnswer;

  const installationDirectory = (0, _path.join)(directoryPath, directoryName);

  const tasks = new _listr2.default([{
    title: `Download and extract source code of the ${activeGuide.name}`,
    task: () => {
      return (0, _github.getLatestGitHubRelease)(activeGuide.repository, installationDirectory);
    }
  }, {
    title: 'Installing dependencies - this may take up to one minute',
    task: () => {
      return (0, _execa2.default)('npm', ['install'], {
        cwd: installationDirectory
      });
    }
  }, {
    title: 'Creating a Contentful Delivery API token to read content from your Space.',
    task: async ctx => {
      const context = await (0, _context.getContext)();
      const { accessToken } = await (0, _create.accessTokenCreate)({
        name: 'Contentful Get Started Guide',
        description: 'This access token was created by the Contentful Get Started Guide',
        silent: true,
        feature: 'guide',
        context: _extends({ activeSpaceId: spaceId }, context)
      });
      ctx.deliveryToken = accessToken;
    }
  }, {
    title: 'Setting up project configuration file which includes your Contentful Delivery API token',
    task: async ctx => {
      const { managementToken } = await (0, _context.getContext)();
      const { deliveryToken } = ctx;
      return activeGuide.setupConfig({ managementToken, deliveryToken, spaceId, installationDirectory });
    }
  }], {
    collapse: false
  });

  (0, _log.log)();
  await tasks.run();

  guideContext.installationDirectory = installationDirectory;
};