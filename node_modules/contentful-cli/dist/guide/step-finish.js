'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _fs = require('fs');

var _markdownCli = require('markdown-cli');

var _markdownCli2 = _interopRequireDefault(_markdownCli);

var _context = require('../context');

var _contentfulClients = require('../utils/contentful-clients');

var _log = require('../utils/log');

var _text = require('../utils/text');

var _styles = require('../utils/styles');

var _emojis = require('../utils/emojis');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function finishStep(guideContext) {
  const { installationDirectory, activeGuide, spaceId } = guideContext;

  const { managementToken, host } = await (0, _context.getContext)();

  const client = await (0, _contentfulClients.createManagementClient)({
    host,
    accessToken: managementToken,
    feature: 'guide'
  });

  const space = await client.getSpace(spaceId);
  const environment = await space.getEnvironment('master');

  const entries = await environment.getEntries();

  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.success)(`${_emojis.successEmoji}${_chalk2.default.bold('Congratulations!')} The guide is now completed.`);
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.log)();
  (0, _log.wrappedLog)(`Your space contains ${entries.items.length} entries. Add or change them at ${(0, _styles.pathStyle)(`https://app.contentful.com/spaces/${spaceId}/entries`)}.`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)();
  (0, _log.log)(`Navigate to your ${activeGuide.name} via: ${(0, _styles.codeStyle)(`cd ${(0, _path.relative)(process.cwd(), installationDirectory)}`)}`);
  (0, _log.log)();
  try {
    const whatsNextText = (0, _fs.readFileSync)((0, _path.join)(installationDirectory, 'WHATS-NEXT.MD'));
    (0, _log.log)((0, _text.frame)((0, _markdownCli2.default)(whatsNextText.toString()).trim()));
  } catch (e) {}
};