'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getConfigPath = getConfigPath;
exports.getContext = getContext;
exports.setContext = setContext;
exports.emptyContext = emptyContext;
exports.storeRuntimeConfig = storeRuntimeConfig;

var _fs = require('mz/fs');

var _path = require('path');

var _os = require('os');

var _findUp = require('find-up');

var _findUp2 = _interopRequireDefault(_findUp);

var _proxy = require('./utils/proxy');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let context;
let configPath;

async function getConfigPath() {
  const contentfulrc = '.contentfulrc.json';
  const defaultPath = (0, _path.resolve)((0, _os.homedir)(), contentfulrc);
  const nestedConfigPath = await (0, _findUp2.default)(contentfulrc);
  configPath = nestedConfigPath || defaultPath;
  return configPath;
}

async function getContext() {
  if (!context) {
    context = await loadRuntimeConfig();
  }

  return context;
}

function setContext(newContext) {
  context = _extends({}, context, newContext);
}

function emptyContext(newContext) {
  context = null;
}

function loadProxyFromEnv(env) {
  const proxyString = env['https_proxy'] || env['HTTPS_PROXY'] || env['http_proxy'] || env['HTTP_PROXY'];

  // Delete all potential proxy keys `axios` might use
  delete env['http_proxy'];
  delete env['HTTP_PROXY'];
  delete env['https_proxy'];
  delete env['HTTPS_PROXY'];

  if (!proxyString) {
    return {};
  }

  const proxy = (0, _proxy.proxyStringToObject)(proxyString);
  return { proxy };
}

async function loadRuntimeConfig() {
  const configPath = await getConfigPath();
  let configFileContent;

  try {
    const content = await (0, _fs.readFile)(configPath);
    configFileContent = JSON.parse(content.toString());
  } catch (e) {
    if (e.code !== 'ENOENT') {
      throw e;
    }

    configFileContent = {};
  }

  const environment = loadProxyFromEnv(process.env);

  context = _extends({}, context, configFileContent, environment);

  return context;
}

async function storeRuntimeConfig() {
  const contextToStore = {
    managementToken: context.managementToken,
    activeSpaceId: context.activeSpaceId,
    activeEnvironmentId: context.activeEnvironmentId,
    host: context.host,
    proxy: context.proxy,
    rawProxy: context.rawProxy
  };
  return (0, _fs.writeFile)((await getConfigPath()), JSON.stringify(contextToStore, null, 2) + '\n');
}