'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.downloadBoilerplate = downloadBoilerplate;

var _fs = require('fs');

var _path = require('path');

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _markdownCli = require('markdown-cli');

var _markdownCli2 = _interopRequireDefault(_markdownCli);

var _async = require('../utils/async');

var _log = require('../utils/log');

var _emojis = require('../utils/emojis');

var _text = require('../utils/text');

var _create = require('./space_cmds/accesstoken_cmds/create');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'boilerplate';

const desc = exports.desc = 'Download a boilerplate';
const epilog = ['See more at:\nhttps://github.com/contentful/contentful-cli/tree/master/docs/boilerplate', 'Copyright 2018 Contentful, this is a BETA release'].join('\n');

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful boilerplate').option('space-id', {
    alias: 's',
    describe: 'ID of the Space the boilerplate will be connecting to'
  }).epilog(epilog);
};

async function getBoilerplates() {
  try {
    const boilerplatesResult = await (0, _axios2.default)({
      url: 'https://tools.contentful.com/boilerplates'
    });
    return boilerplatesResult.data;
  } catch (err) {
    throw err;
  }
}

async function downloadBoilerplate({ context }) {
  const { activeSpaceId, managementToken } = context;

  const boilerplatesResult = await getBoilerplates();

  const boilerplates = boilerplatesResult.items;

  const boilerplateChoices = boilerplates.map(boilerplate => ({
    name: boilerplate.name,
    value: boilerplate.sys.id
  }));

  const selectionAnswers = await _inquirer2.default.prompt([{
    type: 'list',
    name: 'boilerplate',
    message: 'Which boilerplate would you like to get?',
    choices: boilerplateChoices
  }]);

  const boilerplate = boilerplates.find(boilerplate => boilerplate.sys.id === selectionAnswers.boilerplate);
  const filePath = (0, _path.resolve)('.', `boilerplate-${boilerplate.sys.id}.zip`);

  const tasks = new _listr2.default([{
    title: `Creating CDA access token`,
    task: async ctx => {
      ctx.accessToken = await (0, _create.accessTokenCreate)({
        name: `Boilerplate CDA access token`,
        description: `This token was generated for the ${boilerplate.name}`,
        context: {
          activeSpaceId,
          managementToken
        },
        silent: true
      });
    }
  }, {
    title: `Downloading ${boilerplate.name} boilerplate`,
    task: async ctx => {
      const response = await (0, _axios2.default)({
        url: `https://tools.contentful.com/boilerplates/${boilerplate.sys.id}/download?space_id=${activeSpaceId}&access_token=${ctx.accessToken.accessToken}`,
        responseType: 'stream'
      });
      ctx.data = response.data;
    }
  }, {
    title: 'Writing files to disk',
    task: ctx => {
      return new Promise((resolve, reject) => {
        const writeStream = (0, _fs.createWriteStream)(filePath).on('error', reject).on('finish', resolve);

        ctx.data.pipe(writeStream);
      });
    }
  }]);

  await tasks.run();
  (0, _log.log)();
  (0, _log.success)(`${_emojis.successEmoji} Finished downloading the ${boilerplate.name} boilerplate to:`);
  (0, _log.log)(filePath);
  (0, _log.log)();
  const instructions = [];
  instructions.push(_chalk2.default.bold(boilerplate.name));
  instructions.push('');
  if (boilerplate.description) {
    instructions.push((0, _markdownCli2.default)(boilerplate.description).trim());
  }
  if (boilerplate.instructions) {
    instructions.push('\n');
    instructions.push(_chalk2.default.bold('Installation instructions:'));
    instructions.push('');
    instructions.push((0, _markdownCli2.default)(boilerplate.instructions).trim());
  }
  (0, _log.log)((0, _text.frame)(instructions.join('\n')));
}

const handler = exports.handler = (0, _async.handleAsyncError)(downloadBoilerplate);