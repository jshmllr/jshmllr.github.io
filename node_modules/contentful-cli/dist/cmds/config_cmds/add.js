'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.addHandler = exports.builder = exports.desc = exports.command = undefined;

var _lodash = require('lodash');

var _context = require('../../context');

var _async = require('../../utils/async');

var _error = require('../../utils/error');

var _emojis = require('../../utils/emojis.js');

var _log = require('../../utils/log');

var _proxy = require('../../utils/proxy');

const command = exports.command = 'add';

const desc = exports.desc = 'Adds a config';

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful config add [options]').option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token'
  }).option('active-space-id', {
    alias: 'as',
    describe: 'active space id'
  }).option('active-environment-id', {
    alias: 'ae',
    describe: 'active environment id'
  }).option('host', {
    alias: 'ho',
    describe: 'management host'
  }).option('proxy', {
    alias: 'p',
    describe: 'Proxy configuration in HTTP auth format: host:port or user:password@host:port',
    type: 'string'
  }).option('raw-proxy', {
    alias: 'rp',
    describe: 'Pass proxy config as raw config instead of creating a httpsAgent',
    type: 'boolean'
  }).config('config', 'set all the config options at once');
};

const addHandler = exports.addHandler = async argv => {
  const optionsToPick = ['managementToken', 'activeSpaceId', 'proxy', 'host', 'activeEnvironmentId', 'rawProxy'];
  const opts = (0, _lodash.pickBy)(argv, (value, key) => optionsToPick.includes(key) && value !== undefined);
  validateOptions(opts);
  const configs = transform(opts);
  (0, _context.setContext)(configs);
  await (0, _context.storeRuntimeConfig)();
  (0, _log.success)(`${_emojis.successEmoji} config added successfully`);
};

const handler = exports.handler = (0, _async.handleAsyncError)(addHandler);

function validateOptions(opts) {
  if ((0, _lodash.isEmpty)(opts)) {
    throw new _error.InvalidConfigOptionsError('Make sure to specify at least one option, for more info run the command `contentful config add -h`');
  }

  const proxySimpleExp = /.+:\d+/;
  const proxyAuthExp = /.+:.+@.+:\d+/;
  if (opts.proxy && !(proxySimpleExp.test(opts.proxy) || proxyAuthExp.test(opts.proxy))) {
    throw new _error.InvalidConfigOptionsError('Please provide the proxy config in the following format:\nhost:port or user:password@host:port');
  }
}

function transform(opts) {
  if (opts.proxy) {
    opts.proxy = (0, _proxy.proxyStringToObject)(opts.proxy);
  }
  return clean(opts);
}
function clean(obj) {
  for (var propName in obj) {
    if (obj[propName] === null || obj[propName] === undefined) {
      delete obj[propName];
    }
  }
  return obj;
}