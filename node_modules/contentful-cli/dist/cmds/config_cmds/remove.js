'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.removeHandler = exports.builder = exports.desc = exports.command = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _async = require('../../utils/async');

var _log = require('../../utils/log');

var _emojis = require('../../utils/emojis.js');

var _context = require('../../context');

const command = exports.command = 'remove';

const desc = exports.desc = 'Removes a config from ~/.contentfulrc.json';

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful config remove [options]').option('management-token', {
    alias: 'mt',
    describe: 'Remove the API management token from the config',
    type: 'boolean',
    default: false
  }).option('active-space-id', {
    alias: 'as',
    describe: 'Remove the active space id from the config',
    type: 'boolean',
    default: false
  }).option('active-environment-id', {
    alias: 'ae',
    describe: 'Remove the active environment id from the config'
  }).option('host', {
    alias: 'ho',
    describe: 'Remove the management host from the config'
  }).option('proxy', {
    alias: 'p',
    describe: 'Remove the proxy from the config',
    type: 'boolean',
    default: false
  }).option('raw-proxy', {
    alias: 'rp',
    describe: 'Pass proxy config as raw config instead of creating a httpsAgent',
    type: 'boolean'
  }).option('all', {
    describe: 'Remove all the things from the config',
    type: 'boolean',
    default: false
  });
};

const removeHandler = exports.removeHandler = async argv => {
  let options = _extends({}, argv.context);
  if (argv.all) {
    options = {};
  } else {
    const contextKeys = ['managementToken', 'activeSpaceId', 'activeEnvironmentId', 'proxy', 'rawProxy', 'host'];
    contextKeys.forEach(key => argv[key] && delete options[key]);
  }
  (0, _context.emptyContext)();
  (0, _context.setContext)(options);
  await (0, _context.storeRuntimeConfig)();
  (0, _log.success)(`${_emojis.successEmoji} config removed successfully`);
};

const handler = exports.handler = (0, _async.handleAsyncError)(removeHandler);