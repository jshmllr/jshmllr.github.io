'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.migration = exports.builder = exports.desc = exports.command = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _cli = require('contentful-migration/built/bin/cli');

var _cli2 = _interopRequireDefault(_cli);

var _async = require('../../utils/async');

var _proxy = require('../../utils/proxy');

var _package = require('../../../package.json');

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'migration';

const desc = exports.desc = 'Parses and runs a migration script on a Contentful space';

const builder = exports.builder = yargs => {
  yargs.usage('Parses and runs a migration script on a Contentful space.\n\nUsage: contentful migration [args] <path-to-script-file>\n\nScript: path to a migration script.').demandCommand(1, 'Please provide the file containing the migration script.').check(args => {
    const filePath = path.resolve(process.cwd(), args._[2]);
    if (fs.existsSync(filePath)) {
      args.filePath = filePath;
      return true;
    }
    throw new Error(`Cannot find file ${filePath}.`);
  }).version(_package.version || 'Version only available on installed package').option('space-id', {
    alias: 's',
    describe: 'ID of the space to run the migration script on'
  }).option('environment-id', {
    alias: 'e',
    describe: 'ID of the environment within the space to run the migration script on'
  }).option('management-token', {
    alias: 'mt',
    describe: 'The Contentful management token to use\nThis takes precedence over environment variables or .contentfulrc'
  }).option('yes', {
    alias: 'y',
    boolean: true,
    describe: 'Skips any confirmation before applying the migration script'
  }).option('quiet', {
    alias: 'q',
    boolean: false,
    describe: 'Reduce verbosity of information for the execution',
    default: false
  }).help('h').alias('h', 'help').example('contentful migration', '--space-id abcedef my-migration.js').strict().config('config', 'An optional configuration JSON file containing all the options for a single run').epilog('Copyright 2018 Contentful, this is a BETA release');
};

const migration = exports.migration = async argv => {
  const { context } = argv;
  const { managementToken, activeSpaceId, activeEnvironmentId, proxy, rawProxy } = context;
  const managementApplication = `contentful.cli/${_package.version}`;
  const managementFeature = `space-migration`;

  const options = _extends({}, argv, {
    spaceId: activeSpaceId,
    managementApplication,
    managementFeature,
    accessToken: managementToken,
    environmentId: activeEnvironmentId
  });
  if (proxy) {
    // contentful-import and contentful-export
    // expect a string for the proxy config
    // and create agents from it
    options.proxy = (0, _proxy.proxyObjectToString)(proxy);
    options.rawProxy = rawProxy;
  }
  return (0, _cli2.default)(options);
};
const handler = exports.handler = (0, _async.handleAsyncError)(migration);