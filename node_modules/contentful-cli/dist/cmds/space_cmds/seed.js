'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.spaceSeed = spaceSeed;

var _path = require('path');

var _os = require('os');

var _contentfulImport = require('contentful-import');

var _contentfulImport2 = _interopRequireDefault(_contentfulImport);

var _bfj = require('bfj');

var _bfj2 = _interopRequireDefault(_bfj);

var _actions = require('../../utils/actions');

var _async = require('../../utils/async');

var _contentfulClients = require('../../utils/contentful-clients');

var _emojis = require('../../utils/emojis');

var _github = require('../../utils/github');

var _log = require('../../utils/log');

var _styles = require('../../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'seed';
const desc = exports.desc = 'Seed a content model and content based on given templates';

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful space seed --template blog').option('template', {
    alias: 't',
    describe: 'The template to apply on your Space. All possible options are listed here: https://github.com/contentful/content-models',
    demandOption: true,
    nargs: 1
  }).option('space-id', {
    alias: 's',
    describe: 'ID of the Space to seed the data to',
    nargs: 1
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('yes', {
    describe: 'Skip the confirmation question'
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function spaceSeed({ context, yes, template, feature = 'space-seed' }) {
  const { managementToken, activeSpaceId, host, proxy, rawProxy } = context;
  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature,
    proxy,
    rawProxy
  });

  const space = await client.getSpace(activeSpaceId);

  if (!yes) {
    (0, _log.log)(`You are about to apply changes to your ${(0, _styles.highlightStyle)(space.name)} (${(0, _styles.highlightStyle)(space.sys.id)}) Space. Existing content might be overwritten.`);
    (0, _log.log)();

    const confirm = await (0, _actions.confirmation)('Do you want to apply the changes to your Space now?');
    (0, _log.log)();

    if (!confirm) {
      (0, _log.log)((0, _styles.warningStyle)(`User aborted the population of structure and content to the Space.`));
      return;
    }
  }

  const destination = (0, _path.resolve)((0, _os.tmpdir)(), '.contentful', 'content-models');
  await (0, _github.getLatestGitHubRelease)('contentful/content-models', destination).run();
  const content = await _bfj2.default.read((0, _path.resolve)(destination, template, 'contentful-export.json'));

  (0, _log.log)();
  await (0, _contentfulImport2.default)({
    content,
    spaceId: activeSpaceId,
    host,
    managementToken,
    managementFeature: feature || 'space-seed'
  });

  (0, _log.log)();
  (0, _log.success)(`${_emojis.successEmoji} The Content model was applied to your ${(0, _styles.highlightStyle)(space.name)} (${(0, _styles.highlightStyle)(space.sys.id)}) Space.`);
}

const handler = exports.handler = (0, _async.handleAsyncError)(spaceSeed);