'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.exportSpace = exports.builder = exports.desc = exports.command = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _log = require('../../utils/log');

var log = _interopRequireWildcard(_log);

var _contentfulExport = require('contentful-export');

var _contentfulExport2 = _interopRequireDefault(_contentfulExport);

var _async = require('../../utils/async');

var _proxy = require('../../utils/proxy');

var _emojic = require('emojic');

var _emojic2 = _interopRequireDefault(_emojic);

var _package = require('../../../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const command = exports.command = 'export';

const desc = exports.desc = 'export a space data to a json file';

const builder = exports.builder = function (yargs) {
  return yargs.option('space-id', {
    describe: 'ID of Space with source data',
    type: 'string'
  }).option('environment-id', {
    describe: 'ID of Environment with source data',
    type: 'string'
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('export-dir', {
    describe: 'Defines the path for storing the export json file (default path is the current directory)',
    type: 'string'
  }).option('include-drafts', {
    describe: 'Include drafts in the exported entries',
    type: 'boolean',
    default: false
  }).option('skip-content-model', {
    describe: 'Skip exporting content models',
    type: 'boolean',
    default: false
  }).option('skip-content', {
    describe: 'Skip exporting assets and entries',
    type: 'boolean',
    default: false
  }).option('skip-roles', {
    describe: 'Skip exporting roles and permissions',
    type: 'boolean',
    default: false
  }).option('skip-webhooks', {
    describe: 'Skip exporting webhooks',
    type: 'boolean',
    default: false
  }).option('content-only', {
    describe: 'only export entries and assets',
    type: 'boolean',
    default: false
  }).option('download-assets', {
    describe: 'With this flags assets will also be downloaded',
    type: 'boolean'
  }).option('max-allowed-limit', {
    describe: 'How many items per page per request',
    type: 'number',
    default: 1000
  }).option('host', {
    describe: 'Management API host',
    type: 'string',
    default: 'api.contentful.com'
  }).option('proxy', {
    describe: 'Proxy configuration in HTTP auth format: [http|https]://host:port or [http|https]://user:password@host:port',
    type: 'string'
  }).option('error-log-file', {
    describe: 'Full path to the error log file',
    type: 'string'
  }).option('query-entries', {
    describe: 'Exports only entries that matches these queries',
    type: 'array'
  }).option('query-assets', {
    describe: 'Exports only assets that matches these queries',
    type: 'array'
  }).option('content-file', {
    describe: 'The filename for the exported data',
    type: 'string'
  }).option('save-file', {
    describe: 'Save the export as a json file',
    type: 'boolean',
    default: true
  }).option('use-verbose-renderer', {
    describe: 'Display progress in new lines instead of displaying a busy spinner and the status in the same line. Useful for CI.',
    type: 'boolean',
    default: false
  }).config('config', 'An optional configuration JSON file containing all the options for a single run').epilog('Copyright 2018 Contentful, this is a BETA release');
};

const exportSpace = exports.exportSpace = async argv => {
  const { context, feature = 'space-export' } = argv;
  const { managementToken, activeSpaceId, activeEnvironmentId, host, proxy, rawProxy } = context;
  const managementApplication = `contentful.cli/${_package.version}`;
  const managementFeature = feature;

  const options = _extends({}, argv, {
    spaceId: activeSpaceId,
    environmentId: activeEnvironmentId,
    managementApplication,
    managementFeature,
    managementToken,
    host
  });

  if (proxy) {
    // contentful-import and contentful-export
    // expect a string for the proxy config
    // and create agents from it
    options.proxy = (0, _proxy.proxyObjectToString)(proxy);
    options.rawProxy = rawProxy;
  }
  try {
    const exportResult = await (0, _contentfulExport2.default)(options);
    log.success(`${_emojic2.default.sparkles} Done`);
    return exportResult;
  } catch (err) {
    throw err;
  }
};
const handler = exports.handler = (0, _async.handleAsyncError)(exportSpace);