'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.accessTokenCreate = accessTokenCreate;

var _async = require('../../../utils/async');

var _contentfulClients = require('../../../utils/contentful-clients');

var _emojis = require('../../../utils/emojis');

var _log = require('../../../utils/log');

var _pagination = require('../../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _styles = require('../../../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'create';

const desc = exports.desc = 'Create a delivery access token';

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful accesstoken create --name \'Your token name\' --description \'Your token description\'').option('name', {
    alias: 'n',
    describe: 'Name of the Token to create',
    demandOption: true
  }).option('description', {
    alias: 'desc',
    describe: 'Description giving more detailed information about the usage of the Token'
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('space-id', { alias: 's', type: 'string', describe: 'Space id' }).option('silent', {
    describe: 'Suppress command output',
    default: false
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function accessTokenCreate(argv) {
  const { context, name, description, silent, feature = 'space-access_token-create' } = argv;
  const { managementToken, activeSpaceId } = context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature
  });

  const space = await client.getSpace(activeSpaceId);
  const accessTokens = await (0, _pagination2.default)({ client: space, method: 'getApiKeys' });

  let accessToken = accessTokens.items.find(key => key.name === name);

  if (accessToken) {
    if (!silent) {
      (0, _log.success)(`${_emojis.successEmoji} Successfully returned already existing access token ${(0, _styles.highlightStyle)(accessToken.name)} (${(0, _styles.highlightStyle)(accessToken.accessToken)})`);
    }
    return accessToken;
  }

  accessToken = await space.createApiKey({
    name,
    description
  });

  if (!silent) {
    (0, _log.success)(`${_emojis.successEmoji} Successfully created access token ${(0, _styles.highlightStyle)(accessToken.name)} (${(0, _styles.highlightStyle)(accessToken.accessToken)})`);
  }

  return accessToken;
}

const handler = exports.handler = (0, _async.handleAsyncError)(accessTokenCreate);