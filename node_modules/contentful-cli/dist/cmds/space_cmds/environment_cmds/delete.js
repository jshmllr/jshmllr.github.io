'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.environmentDelete = environmentDelete;

var _log = require('../../../utils/log');

var logging = _interopRequireWildcard(_log);

var _async = require('../../../utils/async');

var _contentfulClients = require('../../../utils/contentful-clients');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const command = exports.command = 'delete';

const desc = exports.desc = 'Delete an environment';

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful space environment delete --environment-id \'staging\'').option('environment-id', {
    alias: 'e',
    describe: 'Id of the environment to delete',
    demandOption: true
  }).option('space-id', {
    alias: 's',
    describe: 'ID of the space that holds the environment',
    type: 'string'
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).epilog(['See more at:', 'https://github.com/contentful/contentful-cli/tree/master/docs/space/environment/delete', 'Copyright 2018 Contentful, this is a BETA release'].join('\n'));
};

async function environmentDelete({ context, environmentId }) {
  const { managementToken, activeSpaceId } = context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'space-environment-delete'
  });

  const space = await client.getSpace(activeSpaceId);

  const environment = await space.getEnvironment(environmentId);

  await environment.delete();

  logging.success(`Successfully deleted environment ${environment.name} (${environment.sys.id})`);

  return environment;
}

const handler = exports.handler = (0, _async.handleAsyncError)(environmentDelete);