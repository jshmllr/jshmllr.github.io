'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.aliases = exports.desc = exports.command = undefined;
exports.environmentUse = environmentUse;

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _contentfulClients = require('../../../utils/contentful-clients');

var _context = require('../../../context');

var _async = require('../../../utils/async');

var _log = require('../../../utils/log');

var _pagination = require('../../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _styles = require('../../../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'use';

const desc = exports.desc = 'Sets the default environment which every command will use when the --environment-id option is skipped.';

const aliases = exports.aliases = ['u'];

const builder = exports.builder = yargs => {
  return yargs.usage('Usage: contentful space environment use').option('environment-id', {
    alias: 'e',
    describe: 'ID of the Environment within the currently active Space to use for other commands',
    type: 'string'
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('space-id', { alias: 's', type: 'string', describe: 'Space id' }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

function showSuccess(space, environment) {
  (0, _log.success)(`Now using Environment ${(0, _styles.highlightStyle)(environment.name)} (${(0, _styles.highlightStyle)(environment.sys.id)}) in Space ${(0, _styles.highlightStyle)(space.name)} (${(0, _styles.highlightStyle)(space.sys.id)}) when the \`--environment-id\` option is missing.`);
}

async function environmentUse({ context, environmentId }) {
  const { managementToken, activeSpaceId } = context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'space-environment-use'
  });

  const space = await client.getSpace(activeSpaceId);

  if (environmentId) {
    const environment = await space.getEnvironment(environmentId);

    await (0, _context.setContext)({
      activeEnvironmentId: environment.sys.id
    });

    await (0, _context.storeRuntimeConfig)();

    showSuccess(space, environment);

    return environment;
  }

  const environmentsResult = await (0, _pagination2.default)({ client: space, method: 'getEnvironments' });
  const environmentsChoices = environmentsResult.items.sort((a, b) => a.name.localeCompare(b.name)).map(environment => ({
    name: `${environment.name} (${environment.sys.id})`,
    value: environment.sys.id
  }), {}).concat([new _inquirer2.default.Separator()]);

  const answersEnvironmentSelection = await _inquirer2.default.prompt([{
    type: 'list',
    name: 'environmentId',
    message: 'Please select an environment:',
    choices: environmentsChoices
  }]);

  const environment = await space.getEnvironment(answersEnvironmentSelection.environmentId);

  await (0, _context.setContext)({
    activeEnvironmentId: environment.sys.id
  });

  await (0, _context.storeRuntimeConfig)();

  showSuccess(space, environment);

  return environment;
}

const handler = exports.handler = (0, _async.handleAsyncError)(environmentUse);