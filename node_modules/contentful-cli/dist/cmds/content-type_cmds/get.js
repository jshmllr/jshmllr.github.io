'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;

var _cliTable = require('cli-table3');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _contentfulClients = require('../../utils/contentful-clients');

var _log = require('../../utils/log');

var _async = require('../../utils/async');

var _helpers = require('../../utils/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'get';

const desc = exports.desc = 'Show a content type';

const builder = exports.builder = yargs => {
  return yargs.option('id', { type: 'string', demand: true, describe: 'Content Type id' }).option('space-id', { alias: 's', type: 'string', describe: 'Space id' }).option('management-token', { alias: 'mt', type: 'string', describe: 'Contentful management API token' }).option('environment-id', { type: 'string', describe: 'Environment id' }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function ctShow(argv) {
  const contentTypeId = (0, _helpers.getId)(argv);
  const { managementToken, activeSpaceId, activeEnvironmentId } = argv.context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'content_type-get'
  });

  const space = await client.getSpace(activeSpaceId);
  const environment = await space.getEnvironment(activeEnvironmentId);
  const result = await environment.getContentType(contentTypeId);

  const { sys, name, displayField, fields } = result;

  const table = new _cliTable2.default({
    head: ['CT Property', 'CT Value']
  });

  table.push(['ID', sys.id]);
  table.push(['Name', name]);
  table.push(['Display Field', displayField]);

  (0, _log.log)(table.toString());

  const fieldsTable = new _cliTable2.default({
    head: ['*', 'Field ID', 'Field Name', 'Field Type', 'Required']
  });

  fields.forEach(({ id, name, type, required }) => {
    const isDisplayField = id === displayField;
    const displayFieldIndicator = isDisplayField ? '*' : '';
    fieldsTable.push([displayFieldIndicator, id, name, type, required]);
  });

  (0, _log.log)(fieldsTable.toString());
}

const handler = exports.handler = (0, _async.handleAsyncError)(ctShow);