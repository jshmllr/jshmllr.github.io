'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.desc = exports.command = undefined;
exports.guide = guide;

var _path = require('path');

var _commandExists = require('command-exists');

var _commandExists2 = _interopRequireDefault(_commandExists);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _inquirerSelectDirectory = require('inquirer-select-directory');

var _inquirerSelectDirectory2 = _interopRequireDefault(_inquirerSelectDirectory);

var _bfj = require('bfj');

var _bfj2 = _interopRequireDefault(_bfj);

var _log = require('../utils/log');

var _text = require('../utils/text');

var _async = require('../utils/async');

var _stepLogin = require('../guide/step-login');

var _stepLogin2 = _interopRequireDefault(_stepLogin);

var _stepSeed = require('../guide/step-seed');

var _stepSeed2 = _interopRequireDefault(_stepSeed);

var _stepCreateSpace = require('../guide/step-create-space');

var _stepCreateSpace2 = _interopRequireDefault(_stepCreateSpace);

var _stepSetup = require('../guide/step-setup');

var _stepSetup2 = _interopRequireDefault(_stepSetup);

var _stepDevServer = require('../guide/step-dev-server');

var _stepDevServer2 = _interopRequireDefault(_stepDevServer);

var _stepFinish = require('../guide/step-finish');

var _stepFinish2 = _interopRequireDefault(_stepFinish);

var _helpers = require('../guide/helpers');

var _styles = require('../utils/styles');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_inquirer2.default.registerPrompt('directory', _inquirerSelectDirectory2.default);

const guides = {
  'starter-nuxt-blog': {
    name: 'Nuxt Starter Blog',
    directoryName: 'contentful-nuxt-blog',
    repository: 'contentful/blog-in-5-minutes',
    seed: 'blog',
    setupConfig: async ({ managementToken, deliveryToken, spaceId, installationDirectory }) => {
      const config = await _bfj2.default.read((0, _path.join)(installationDirectory, '.contentful.sample.json'));
      config.CTF_CDA_ACCESS_TOKEN = deliveryToken;
      config.CTF_CMA_ACCESS_TOKEN = managementToken;
      config.CTF_SPACE_ID = spaceId;
      return _bfj2.default.write((0, _path.join)(installationDirectory, '.contentful.json'), config, {
        space: 2
      });
    },
    devExecutable: 'npm',
    devParameters: ['run', 'dev'],
    devURI: 'http://127.0.0.1:3000',
    devBrowserOpenRegex: /DONE/
  },
  'starter-gatsby-blog': {
    name: 'Gatsby Starter Blog',
    directoryName: 'contentful-gatsby-blog',
    repository: 'contentful/starter-gatsby-blog',
    seed: 'blog',
    setupConfig: async ({ deliveryToken, spaceId, installationDirectory }) => {
      const config = await _bfj2.default.read((0, _path.join)(installationDirectory, '.contentful.json.sample'));
      config.spaceId = spaceId;
      config.accessToken = deliveryToken;
      return _bfj2.default.write((0, _path.join)(installationDirectory, '.contentful.json'), config, {
        space: 2
      });
    },
    devExecutable: 'npm',
    devParameters: ['run', 'dev'],
    devURI: 'http://127.0.0.1:8000',
    devBrowserOpenRegex: /You can now view .* in the browser./
  }
};

const command = exports.command = 'guide';

const desc = exports.desc = 'A guide introducing basic concepts of working with Contentful';

async function guide() {
  const guideContext = {
    stepCount: 0,
    activeGuide: guides['starter-gatsby-blog']
  };

  if (!_commandExists2.default.sync('node') || !_commandExists2.default.sync('npm')) {
    (0, _log.wrappedLog)(`${(0, _styles.errorStyle)('Missing required tool:')} Please install nodejs.\n\nSee ${(0, _styles.pathStyle)('https://github.com/creationix/nvm')} or ${(0, _styles.pathStyle)('https://nodejs.org/en/download/')}`, _helpers.GUIDE_MAX_WIDTH);
    process.exit(1);
  }

  (0, _log.log)();
  (0, _log.log)((0, _text.asciiText)('Contentful Guide'));

  // Enforce first steps to be executed
  try {
    // Step 1 - Login
    await (0, _stepLogin2.default)(guideContext);

    // Step 2 - Create space
    await (0, _stepCreateSpace2.default)(guideContext);

    // Step 3 - Seed Content
    await (0, _stepSeed2.default)(guideContext);

    // Step 4 - Set up custom app
    await (0, _stepSetup2.default)(guideContext);
  } catch (error) {
    if (error instanceof _helpers.AbortedError) {
      (0, _log.log)('The guide was aborted by the user');
      return;
    }
    throw error;
  }

  // Dev server step is optional
  try {
    // Step 5 - Run dev server
    await (0, _stepDevServer2.default)(guideContext);
  } catch (error) {
    if (!(error instanceof _helpers.AbortedError)) {
      throw error;
    }
  }

  // Finished
  await (0, _stepFinish2.default)(guideContext);
}

const handler = exports.handler = (0, _async.handleAsyncError)(guide);