'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.listExtensions = listExtensions;

var _cliTable = require('cli-table3');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _contentfulClients = require('../../utils/contentful-clients');

var _async = require('../../utils/async');

var _log = require('../../utils/log');

var _pagination = require('../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'list';

const desc = exports.desc = 'List all extensions';

const builder = exports.builder = yargs => {
  return yargs.option('management-token', { alias: 'mt', type: 'string', describe: 'Contentful management API token' }).option('space-id', { type: 'string', describe: 'Space id' }).option('environment-id', { type: 'string', describe: 'Environment id' }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function listExtensions({ context }) {
  const { managementToken, activeSpaceId, activeEnvironmentId } = context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'extension-list'
  });

  const space = await client.getSpace(activeSpaceId);
  const environment = await space.getEnvironment(activeEnvironmentId);

  const result = await (0, _pagination2.default)({
    client: environment,
    method: 'getUiExtensions',
    query: {
      order: 'extension.name,sys.id'
    }
  });

  if (result.items.length) {
    const extensions = result.items.sort((a, b) => a.extension.name.localeCompare(b.extension.name));

    const table = new _cliTable2.default({
      head: ['Extension Name', 'Extension ID', 'Version']
    });

    extensions.forEach(extension => {
      table.push([extension.extension.name, extension.sys.id, extension.sys.version]);
    });

    (0, _log.log)(table.toString());
    return;
  }

  (0, _log.log)('No extensions found');
}

const handler = exports.handler = (0, _async.handleAsyncError)(listExtensions);