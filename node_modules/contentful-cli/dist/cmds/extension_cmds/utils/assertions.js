'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertForceOrCorrectVersionProvided = assertForceOrCorrectVersionProvided;
exports.assertExtensionValuesProvided = assertExtensionValuesProvided;

var _lodash = require('lodash');

var _error = require('../../../utils/error');

async function assertHasRequiredProperties(extension, required) {
  const missingRequiredFields = required.reduce((missing, field) => {
    return extension.hasOwnProperty(field) ? missing : [...missing, field];
  }, []);

  if (missingRequiredFields.length) {
    throw new _error.ValidationError(`Missing required properties: ${missingRequiredFields.map(_lodash.kebabCase).join(', ')}`);
  }
}

async function assertHasOneProperty(extension, list) {
  const filtered = list.filter(prop => {
    return extension.hasOwnProperty(prop) && !extension.prop;
  });

  if (filtered.length === list.length || filtered.length === 0) {
    throw new _error.ValidationError(`Must contain exactly one of: ${list.join(', ')}`);
  }
}

async function assertForceOrCorrectVersionProvided(data, targetVersion) {
  if (!data.force && !data.version) {
    throw new _error.ValidationError('Please provide current version or use the --force flag');
  }

  if (data.version && data.version !== targetVersion) {
    throw new _error.ValidationError('Version provided does not match current resource version');
  }
}

async function assertExtensionValuesProvided(data, action) {
  if (action === 'update') {
    await assertHasRequiredProperties(data, ['id']);
  }
  await assertHasRequiredProperties(data.extension, ['name']);
  await assertHasOneProperty(data.extension, ['src', 'srcdoc']);
}