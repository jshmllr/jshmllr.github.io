'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLatestGitHubRelease = getLatestGitHubRelease;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _bluebird = require('bluebird');

var _listr = require('listr');

var _listr2 = _interopRequireDefault(_listr);

var _tar = require('tar');

var _tar2 = _interopRequireDefault(_tar);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mkdirpP = (0, _bluebird.promisify)(_mkdirp2.default);

function getLatestGitHubRelease(repo, destination) {
  return new _listr2.default([{
    title: `Fetching release information of ${repo}`,
    task: async ctx => {
      try {
        const response = await (0, _axios2.default)({
          url: `https://api.github.com/repos/${repo}/releases/latest`
        });
        ctx.latestReleaseInfo = response.data;
      } catch (err) {
        throw err;
      }
    }
  }, {
    title: `Downloading latest release of ${repo}`,
    task: async ctx => {
      ctx.latestReleaseZipLocation = _path2.default.join(destination, 'latest-release.tar.gz');
      try {
        const response = await (0, _axios2.default)({
          url: ctx.latestReleaseInfo.tarball_url,
          responseType: 'stream'
        });
        ctx.latestReleaseTarballStream = response.data;
      } catch (err) {
        throw err;
      }
    }
  }, {
    title: `Unpacking latest release of ${repo}`,
    task: async ctx => {
      await mkdirpP(destination);
      return new Promise((resolve, reject) => {
        try {
          ctx.latestReleaseTarballStream.pipe(_zlib2.default.Unzip()).pipe(new _tar2.default.Unpack({
            cwd: destination,
            strip: 1
          })).on('error', reject).on('close', resolve);
        } catch (err) {
          reject(err);
        }
      });
    }
  }]);
}