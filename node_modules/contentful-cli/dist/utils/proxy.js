'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proxyStringToObject = proxyStringToObject;
exports.proxyObjectToString = proxyObjectToString;
exports.agentFromProxy = agentFromProxy;

var _url = require('url');

var _lodash = require('lodash');

var _httpsProxyAgent = require('https-proxy-agent');

var _httpsProxyAgent2 = _interopRequireDefault(_httpsProxyAgent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function serializeAuth({ username, password } = {}) {
  if (!username) {
    return '';
  }

  if (!password) {
    return username;
  }

  return `${username}:${password}`;
}

function parseAuth(authString) {
  // authString may be a falsy value like `null`
  const [username, password] = (authString || '').split(':');
  return { username, password };
}

function proxyStringToObject(proxyString) {
  if (!proxyString.startsWith('http')) {
    return proxyStringToObject(`http://${proxyString}`);
  }

  const {
    hostname: host,
    port: portString,
    auth: authString,
    protocol
  } = (0, _url.parse)(proxyString);

  const auth = parseAuth(authString);
  const port = (0, _lodash.toInteger)(portString);
  const isHttps = protocol === 'https:';

  if (!auth.username) {
    return { host, port, isHttps };
  }

  return {
    host,
    port,
    auth,
    isHttps
  };
}

function proxyObjectToString(proxyObject) {
  const { host: hostname, port, auth: authObject, isHttps } = proxyObject;
  const auth = serializeAuth(authObject);
  const protocol = isHttps ? 'https' : 'http';

  const formatted = (0, _url.format)({ protocol, hostname, port, auth });

  // Ugly fix for Node 6 vs Node 8 behavior
  return formatted.replace(/^\/\//, '');
}

function agentFromProxy(proxy) {
  if (!proxy) {
    return {};
  }

  const { host, port } = proxy;
  const httpsAgent = new _httpsProxyAgent2.default({ host, port });
  return { httpsAgent };
}