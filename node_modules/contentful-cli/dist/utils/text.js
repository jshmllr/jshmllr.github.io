'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_COLUMNS = undefined;
exports.wrap = wrap;
exports.frame = frame;
exports.asciiText = asciiText;
exports.separator = separator;
exports.indent = indent;

var _cliTable = require('cli-table3');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _wrapAnsi = require('wrap-ansi');

var _wrapAnsi2 = _interopRequireDefault(_wrapAnsi);

var _figlet = require('figlet');

var _figlet2 = _interopRequireDefault(_figlet);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MIN_COLUMNS = 40;
const MAX_COLUMNS = process.stdout.columns || 80;
const DEFAULT_COLUMNS = exports.DEFAULT_COLUMNS = MAX_COLUMNS >= MIN_COLUMNS ? MAX_COLUMNS : MIN_COLUMNS;

function wrap(text, columns) {
  return (0, _wrapAnsi2.default)(text, columns || DEFAULT_COLUMNS, {
    trim: false
  });
}

function frame(text, inline = false, wrapText = true) {
  const width = DEFAULT_COLUMNS - 2;
  const options = {
    colWidths: [width]
  };

  if (inline) {
    delete options.colWidths;
  }

  const table = new _cliTable2.default(options);

  text = text.replace(/\t/g, '  ');

  if (wrapText) {
    text = wrap(text, width);
  }

  table.push([text]);
  return table.toString();
}

function asciiText(text) {
  if (process.stdout.columns <= 78) {
    return _chalk2.default.bold(text);
  }
  return _figlet2.default.textSync(text);
}

function separator(customWidth) {
  let width = customWidth || MAX_COLUMNS;
  return _chalk2.default.dim(Array.from(Array(width + 1)).join('═'));
}

function indent(text) {
  return `\n${text}`.replace(/\s*[\n\r]\s*/g, '\n    ');
}