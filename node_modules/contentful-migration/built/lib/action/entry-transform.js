"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const action_1 = require("./action");
const _ = __importStar(require("lodash"));
class EntryTransformAction extends action_1.APIAction {
    constructor(contentTypeId, fromFields, transformation, shouldPublish = true) {
        super();
        this.contentTypeId = contentTypeId;
        this.fromFields = fromFields;
        // this.toFields = toFields
        this.transformEntryForLocale = transformation;
        this.shouldPublish = shouldPublish;
    }
    async applyTo(api) {
        const entries = await api.getEntriesForContentType(this.contentTypeId);
        const locales = await api.getLocalesForSpace();
        for (const entry of entries) {
            const inputs = _.pick(entry.fields, this.fromFields);
            let changesForThisEntry = false;
            for (const locale of locales) {
                let outputsForCurrentLocale;
                try {
                    outputsForCurrentLocale = await this.transformEntryForLocale(inputs, locale);
                }
                catch (err) {
                    await api.recordRuntimeError(err);
                    continue;
                }
                if (outputsForCurrentLocale === undefined) {
                    continue;
                }
                changesForThisEntry = true;
                // TODO verify that the toFields actually get written to
                // and to no other field
                Object.keys(outputsForCurrentLocale).forEach((fieldId) => {
                    if (!entry.fields[fieldId]) {
                        entry.setField(fieldId, {});
                    }
                    entry.setFieldForLocale(fieldId, locale, outputsForCurrentLocale[fieldId]);
                });
            }
            if (changesForThisEntry) {
                await api.saveEntry(entry.id);
                if (this.shouldPublish === true || (this.shouldPublish === 'preserve' && entry.isPublished)) {
                    await api.publishEntry(entry.id);
                }
            }
        }
    }
}
exports.EntryTransformAction = EntryTransformAction;
//# sourceMappingURL=entry-transform.js.map