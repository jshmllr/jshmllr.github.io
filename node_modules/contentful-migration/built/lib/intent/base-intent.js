"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Intent {
    constructor(rawStep) {
        this.type = rawStep.type;
        this.meta = rawStep.meta;
        this.payload = rawStep.payload;
    }
    getContentTypeId() {
        return this.payload.contentTypeId;
    }
    isSameContentType(other) {
        return this.getContentTypeId() === other.getContentTypeId();
    }
    getRelatedContentTypeIds() {
        return [this.getContentTypeId()];
    }
    getFieldId() {
        return this.payload.fieldId;
    }
    requiresAllEntries() {
        return false;
    }
    isContentTypeUpdate() {
        return false;
    }
    isContentTypeDelete() {
        return false;
    }
    isContentTypeCreate() {
        return false;
    }
    isFieldCreate() {
        return false;
    }
    isFieldUpdate() {
        return false;
    }
    isFieldDelete() {
        return false;
    }
    isFieldRename() {
        return false;
    }
    isFieldMove() {
        return false;
    }
    isContentTransform() {
        return false;
    }
    isEntryDerive() {
        return false;
    }
    isEntryTransformToType() {
        return false;
    }
    isEditorInterfaceUpdate() {
        return false;
    }
    isSidebarUpdate() {
        return false;
    }
    isGroupable() {
        return false;
    }
    isEditorInterfaceIntent() {
        return false;
    }
    isAboutContentType() {
        return (this.isContentTypeUpdate() ||
            this.isContentTypeCreate() ||
            this.isContentTypeDelete());
    }
    isAboutField() {
        return (this.isFieldCreate() ||
            this.isFieldUpdate() ||
            this.isFieldMove() ||
            this.isFieldRename() ||
            this.isFieldDelete());
    }
    isComposedIntent() {
        return false;
    }
    groupsWith(other) {
        // A content transform does not end the group,
        // but still could share a content type ID
        if (other.isContentTransform()) {
            return false;
        }
        if (other.getContentTypeId() === this.getContentTypeId()) {
            return true;
        }
        return false;
    }
    shouldSave() {
        return true;
    }
    shouldPublish() {
        if (!this.shouldSave()) {
            throw new Error('Cannot publish when shouldSave has falsy value');
        }
        return true;
    }
    toRaw() {
        return {
            type: this.type,
            meta: this.meta,
            payload: this.payload
        };
    }
    getRawType() {
        return this.type;
    }
}
exports.default = Intent;
//# sourceMappingURL=base-intent.js.map