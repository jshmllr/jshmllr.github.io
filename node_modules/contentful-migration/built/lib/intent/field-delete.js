"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_intent_1 = __importDefault(require("./base-intent"));
const field_update_1 = require("../action/field-update");
const content_type_save_1 = require("../action/content-type-save");
const content_type_publish_1 = require("../action/content-type-publish");
const entry_field_purge_1 = require("../action/entry-field-purge");
const chalk_1 = __importDefault(require("chalk"));
class FieldDeleteIntent extends base_intent_1.default {
    isFieldDelete() {
        return true;
    }
    groupsWith() {
        return false;
    }
    endsGroup() {
        return true;
    }
    toActions() {
        const contentTypeId = this.getContentTypeId();
        const fieldId = this.getFieldId();
        return [
            new field_update_1.FieldUpdateAction(contentTypeId, fieldId, { omitted: true }),
            // Save and publish are wrapped around packages automatically
            // But in this case we need to insert some explicit ones
            new content_type_save_1.ContentTypeSaveAction(contentTypeId),
            new content_type_publish_1.ContentTypePublishAction(contentTypeId),
            new field_update_1.FieldUpdateAction(contentTypeId, fieldId, { deleted: true }),
            new entry_field_purge_1.EntryFieldPurgeAction(contentTypeId, fieldId)
        ];
    }
    toPlanMessage() {
        return {
            heading: chalk_1.default `Update Content Type {bold.yellow ${this.getContentTypeId()}}`,
            sections: [{
                    heading: chalk_1.default `Delete field {yellow ${this.getFieldId()}}`,
                    details: []
                }],
            details: []
        };
    }
}
exports.default = FieldDeleteIntent;
//# sourceMappingURL=field-delete.js.map