{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///./src/middlewares/joi/index.ts","webpack:///external \"@hapi/joi\"","webpack:///./src/middlewares/joi/customValidators.ts","webpack:///./src/middlewares/utils/fs.ts","webpack:///./src/middlewares/utils/entries.ts","webpack:///./src/index.ts","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"morgan\"","webpack:///external \"cors\"","webpack:///./src/middlewares/localGit/index.ts","webpack:///../netlify-cms-lib-util/src/API.ts","webpack:///external \"simple-git/promise\"","webpack:///external \"crypto\"","webpack:///./src/middlewares/localFs/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","allowedActions","requiredString","string","required","requiredNumber","number","requiredBool","bool","collection","slug","defaultSchema","path","defaultParams","branch","asset","content","encoding","valid","params","when","switch","is","then","allow","keys","folder","extension","depth","files","array","items","label","entry","raw","assets","options","collectionName","commitMessage","useWorkflow","status","newStatus","mediaFolder","otherwise","forbidden","action","joi","schema","req","res","next","error","validate","body","allowUnknown","details","message","map","join","json","pathTraversal","repoPath","extend","type","base","messages","helpers","startsWith","errors","listFiles","async","dir","dirents","readdir","withFileTypes","Promise","all","dirent","isDirectory","filter","f","endsWith","concat","e","listRepoFiles","substr","length","writeFile","filePath","mkdir","dirname","recursive","deleteFile","unlink","sha256","buffer","createHash","update","digest","normalizePath","replace","entriesFromFiles","file","readFile","data","toString","id","readMediaFile","basename","config","app","port","process","env","PORT","use","limit","MODE","Error","console","exit","listen","log","commit","git","add","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","getEntryDataFromDiff","diff","contentKey","contentKeyFromBranch","parseContentKey","find","includes","mediaFiles","labelToStatus","trim","metaData","objects","entriesFromDiffs","cmsBranches","diffs","entries","cmsBranch","entryPath","rawDiff","push","isModification","commitEntry","a","Buffer","from","isBranchExists","validateRepo","silent","checkIsRepo","getSchema","localGitMiddleware","repo","publish_modes","payload","result","b","CMS_BRANCH_PREFIX","diffSummary","generateContentKey","branchFromContentKey","getEntryMediaFiles","checkoutLocalBranch","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","to","mergeFromTo","merge","deleteLocalBranch","mediaFile","JSON","stringify","registerMiddleware","resolve","GIT_REPO_DIRECTORY","cwd","post","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","isCMSLabel","index","indexOf","substring","fetchContent","localForage","isText","cached","getItem","setItem","PREVIEW_CONTEXT_KEYWORDS","isPreviewContext","context","previewContext","some","keyword","PreviewState","getPreviewStatus","statuses","localFsMiddleware"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","import express from 'express';\nimport Joi from '@hapi/joi';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport const defaultSchema = ({ path = requiredString } = {}) => {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            entry: Joi.object({ slug: requiredString, path, raw: requiredString }).required(),\n            assets: Joi.array()\n              .items(asset)\n              .required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n};\n\nexport const joi = (schema: Joi.Schema) => (\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction,\n) => {\n  const { error } = schema.validate(req.body, { allowUnknown: true });\n  if (error) {\n    const { details } = error;\n    const message = details.map(i => i.message).join(',');\n    res.status(422).json({ error: message });\n  } else {\n    next();\n  }\n};\n","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport const pathTraversal = (repoPath: string) =>\n  Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n","import path from 'path';\nimport { promises as fs } from 'fs';\n\nconst listFiles = async (dir: string, extension: string, depth: number): Promise<string[]> => {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map(dirent => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n};\n\nexport const listRepoFiles = async (\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) => {\n  const files = await listFiles(path.join(repoPath, folder), extension, depth);\n  return files.map(f => f.substr(repoPath.length + 1));\n};\n\nexport const writeFile = async (filePath: string, content: Buffer | string) => {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n};\n\nexport const deleteFile = async (repoPath: string, filePath: string) => {\n  await fs.unlink(path.join(repoPath, filePath));\n};\n","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nconst sha256 = (buffer: Buffer) => {\n  return crypto\n    .createHash('sha256')\n    .update(buffer)\n    .digest('hex');\n};\n\n// normalize windows os path format\nconst normalizePath = (path: string) => path.replace(/\\\\/g, '/');\n\nexport const entriesFromFiles = async (\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) => {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n};\n\nexport const readMediaFile = async (repoPath: string, file: string) => {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n};\n","require('dotenv').config();\nimport express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\nimport { registerMiddleware as registerLocalGit } from './middlewares/localGit';\nimport { registerMiddleware as registerLocalFs } from './middlewares/localFs';\n\nconst app = express();\nconst port = process.env.PORT || 8081;\n\n(async () => {\n  app.use(morgan('combined'));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n\n  try {\n    const mode = process.env.MODE || 'fs';\n    if (mode === 'fs') {\n      registerLocalFs(app);\n    } else if (mode === 'git') {\n      registerLocalGit(app);\n    } else {\n      throw new Error(`Unknown proxy mode '${mode}'`);\n    }\n  } catch (e) {\n    console.error(e.message);\n    process.exit(1);\n  }\n\n  return app.listen(port, () => {\n    console.log(`Netlify CMS Proxy Server listening on port ${port}`);\n  });\n})();\n","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"morgan\");","module.exports = require(\"cors\");","import express from 'express';\nimport path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  parseContentKey,\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n} from 'netlify-cms-lib-util/src/API';\n\nimport { defaultSchema, joi } from '../joi';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  Entry,\n  GetMediaFileParams,\n} from '../types';\n// eslint-disable-next-line import/default\nimport simpleGit from 'simple-git/promise';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nconst commit = async (git: simpleGit.SimpleGit, commitMessage: string, files: string[]) => {\n  await git.add(files);\n  await git.commit(commitMessage, files, {\n    '--no-verify': true,\n    '--no-gpg-sign': true,\n  });\n};\n\nconst getCurrentBranch = async (git: simpleGit.SimpleGit) => {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n};\n\nconst runOnBranch = async <T>(git: simpleGit.SimpleGit, branch: string, func: () => Promise<T>) => {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n};\n\nconst branchDescription = (branch: string) => `branch.${branch}.description`;\n\nconst getEntryDataFromDiff = async (git: simpleGit.SimpleGit, branch: string, diff: string[]) => {\n  const contentKey = contentKeyFromBranch(branch);\n  const { collection, slug } = parseContentKey(contentKey);\n  const path = diff.find(d => d.includes(slug)) as string;\n  const mediaFiles = diff.filter(d => d !== path);\n  const label = await git.raw(['config', branchDescription(branch)]);\n  const status = label && labelToStatus(label.trim());\n\n  return {\n    slug,\n    metaData: { branch, collection, objects: { entry: { path, mediaFiles } }, status },\n  };\n};\n\ntype Options = {\n  repoPath: string;\n};\n\nconst entriesFromDiffs = async (\n  git: simpleGit.SimpleGit,\n  branch: string,\n  repoPath: string,\n  cmsBranches: string[],\n  diffs: simpleGit.DiffResult[],\n) => {\n  const entries = [];\n  for (let i = 0; i < diffs.length; i++) {\n    const cmsBranch = cmsBranches[i];\n    const diff = diffs[i];\n    const data = await getEntryDataFromDiff(\n      git,\n      cmsBranch,\n      diff.files.map(f => f.file),\n    );\n    const entryPath = data.metaData.objects.entry.path;\n    const [entry] = await runOnBranch(git, cmsBranch, () =>\n      entriesFromFiles(repoPath, [{ path: entryPath }]),\n    );\n\n    const rawDiff = await git.diff([branch, cmsBranch, '--', entryPath]);\n    entries.push({\n      ...data,\n      ...entry,\n      isModification: !rawDiff.includes('new file'),\n    });\n  }\n\n  return entries;\n};\n\nconst getEntryMediaFiles = async (\n  git: simpleGit.SimpleGit,\n  repoPath: string,\n  cmsBranch: string,\n  files: string[],\n) => {\n  const mediaFiles = await runOnBranch(git, cmsBranch, async () => {\n    const serializedFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n    return serializedFiles;\n  });\n  return mediaFiles;\n};\n\nconst commitEntry = async (\n  git: simpleGit.SimpleGit,\n  repoPath: string,\n  entry: Entry,\n  assets: Asset[],\n  commitMessage: string,\n) => {\n  // save entry content\n  await writeFile(path.join(repoPath, entry.path), entry.raw);\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  // commits files\n  await commit(git, commitMessage, [entry.path, ...assets.map(a => a.path)]);\n};\n\nconst rebase = async (git: simpleGit.SimpleGit, branch: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst merge = async (git: simpleGit.SimpleGit, from: string, to: string) => {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n};\n\nconst isBranchExists = async (git: simpleGit.SimpleGit, branch: string) => {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n};\n\nexport const validateRepo = async ({ repoPath }: Options) => {\n  const git = simpleGit(repoPath).silent(false);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n};\n\nexport const getSchema = ({ repoPath }: Options) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\nexport const localGitMiddleware = ({ repoPath }: Options) => {\n  const git = simpleGit(repoPath).silent(false);\n\n  return async function(req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          // eslint-disable-next-line @typescript-eslint/camelcase\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n\n          const diffs = await Promise.all(\n            cmsBranches.map(cmsBranch => git.diffSummary([branch, cmsBranch])),\n          );\n          const entries = await entriesFromDiffs(git, branch, repoPath, cmsBranches, diffs);\n          res.json(entries);\n          break;\n        }\n        case 'unpublishedEntry': {\n          const { collection, slug } = body.params as UnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diff = await git.diffSummary([branch, cmsBranch]);\n            const [entry] = await entriesFromDiffs(git, branch, repoPath, [cmsBranch], [diff]);\n            const mediaFiles = await getEntryMediaFiles(\n              git,\n              repoPath,\n              cmsBranch,\n              entry.metaData.objects.entry.mediaFiles,\n            );\n            res.json({ ...entry, mediaFiles });\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as UnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const { entry, assets, options } = body.params as PersistEntryParams;\n          if (!options.useWorkflow) {\n            runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, entry, assets, options.commitMessage);\n            });\n          } else {\n            const slug = entry.slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diff = await git.diffSummary([branch, cmsBranch]);\n              const data = await getEntryDataFromDiff(\n                git,\n                branch,\n                diff.files.map(f => f.file),\n              );\n              // delete media files that have been removed from the entry\n              const toDelete = data.metaData.objects.entry.mediaFiles.filter(\n                f => !assets.map(a => a.path).includes(f),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f))));\n              await commitEntry(git, repoPath, entry, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!data.metaData.status) {\n                const description = statusToLabel(options.status);\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n              // set path for new entries\n              if (!data.metaData.objects.entry.path) {\n                data.metaData.objects.entry.path = entry.path;\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus } = body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus);\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n            const serializedFiles = await Promise.all(\n              files.map(file => readMediaFile(repoPath, file)),\n            );\n            return serializedFiles;\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage, [asset.path]);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await fs.unlink(path.join(repoPath, filePath));\n            await commit(git, commitMessage, [filePath]);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n};\n\nexport const registerMiddleware = async (app: express.Express) => {\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath }));\n  console.log(`Netlify CMS Git Proxy Server configured with ${repoPath}`);\n};\n","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Netlify CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Netlify CMS.';\n\nconst NETLIFY_CMS_LABEL_PREFIX = 'netlify-cms/';\nexport const isCMSLabel = (label: string) => label.startsWith(NETLIFY_CMS_LABEL_PREFIX);\nexport const labelToStatus = (label: string) => label.substr(NETLIFY_CMS_LABEL_PREFIX.length);\nexport const statusToLabel = (status: string) => `${NETLIFY_CMS_LABEL_PREFIX}${status}`;\n\nexport const generateContentKey = (collectionName: string, slug: string) =>\n  `${collectionName}/${slug}`;\n\nexport const parseContentKey = (contentKey: string) => {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.substr(0, index), slug: contentKey.substr(index + 1) };\n};\n\nexport const contentKeyFromBranch = (branch: string) => {\n  return branch.substring(`${CMS_BRANCH_PREFIX}/`.length);\n};\n\nexport const branchFromContentKey = (contentKey: string) => {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n};\n\nexport interface FetchError extends Error {\n  status: number;\n}\n\nexport const readFile = async (\n  id: string | null | undefined,\n  fetchContent: () => Promise<string | Blob>,\n  localForage: LocalForage,\n  isText: boolean,\n) => {\n  const key = id ? (isText ? `gh.${id}` : `gh.${id}.blob`) : null;\n  const cached = key ? await localForage.getItem<string | Blob>(key) : null;\n  if (cached) {\n    return cached;\n  }\n\n  const content = await fetchContent();\n  if (key) {\n    localForage.setItem(key, content);\n  }\n  return content;\n};\n\n/**\n * Keywords for inferring a status that will provide a deploy preview URL.\n */\nconst PREVIEW_CONTEXT_KEYWORDS = ['deploy'];\n\n/**\n * Check a given status context string to determine if it provides a link to a\n * deploy preview. Checks for an exact match against `previewContext` if given,\n * otherwise checks for inclusion of a value from `PREVIEW_CONTEXT_KEYWORDS`.\n */\nexport const isPreviewContext = (context: string, previewContext: string) => {\n  if (previewContext) {\n    return context === previewContext;\n  }\n  return PREVIEW_CONTEXT_KEYWORDS.some(keyword => context.includes(keyword));\n};\n\nexport enum PreviewState {\n  Other = 'other',\n  Success = 'success',\n}\n\n/**\n * Retrieve a deploy preview URL from an array of statuses. By default, a\n * matching status is inferred via `isPreviewContext`.\n */\nexport const getPreviewStatus = (\n  statuses: {\n    context: string;\n    target_url: string;\n    state: PreviewState;\n  }[],\n  previewContext: string,\n) => {\n  return statuses.find(({ context }) => {\n    return isPreviewContext(context, previewContext);\n  });\n};\n","module.exports = require(\"simple-git/promise\");","module.exports = require(\"crypto\");","import express from 'express';\nimport path from 'path';\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n} from '../types';\nimport { listRepoFiles, deleteFile, writeFile } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\ntype Options = {\n  repoPath: string;\n};\n\nexport const localFsMiddleware = ({ repoPath }: Options) => {\n  return async function(req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            // eslint-disable-next-line @typescript-eslint/camelcase\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const { entry, assets } = body.params as PersistEntryParams;\n          await writeFile(path.join(repoPath, entry.path), entry.raw);\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder } = body.params as GetMediaParams;\n          const files = await listRepoFiles(repoPath, mediaFolder, '', 1);\n          const mediaFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      console.error(`Error handling ${JSON.stringify(req.body)}: ${e.message}`);\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n};\n\nexport const getSchema = ({ repoPath }: Options) => {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n};\n\nexport const registerMiddleware = async (app: express.Express) => {\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath }));\n  console.log(`Netlify CMS File System Proxy Server configured with ${repoPath}`);\n};\n"],"sourceRoot":""}