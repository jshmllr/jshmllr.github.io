"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactPolyglot = require("react-polyglot");

var _immutable = require("immutable");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _SettingsDropdown = _interopRequireDefault(require("../UI/SettingsDropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const styles = {
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;"
  } : {
    name: "1yqtsv2-buttonMargin",
    styles: "margin:0 10px;;label:buttonMargin;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection:
  /*#__PURE__*/
  (0, _core.css)("height:100%;display:flex;align-items:center;border:0 solid ", _netlifyCmsUiDefault.colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton:
  /*#__PURE__*/
  (0, _core.css)("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe0",
  label: "ToolbarContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;"
} : {
  name: "fykiwf",
  styles: "box-shadow:0 2px 6px 0 rgba(68,74,87,0.05),0 1px 3px 0 rgba(68,74,87,0.1),0 2px 54px rgba(0,0,0,0.1);position:fixed;top:0;left:0;width:100%;min-width:800px;z-index:300;background-color:#fff;height:66px;display:flex;justify-content:space-between;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionMain = (0, _styledBase.default)("div", {
  target: "evqrzhe1",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EcUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBib3gtc2hhZG93OiAwIDJweCA2cHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMDUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMSksXG4gICAgMCAycHggNTRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgei1pbmRleDogMzAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcblxuICAmOjphZnRlciB7XG4gICAgaGVpZ2h0OiAxMnB4O1xuICAgIHdpZHRoOiAxNS41cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuXG4gICAgY29udGVudDogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sOyB1dGY4LCA8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzE1JyBoZWlnaHQ9JzExJz48cGF0aCBmaWxsPScjMDA1NjE0JyBmaWxsLXJ1bGU9J25vbnplcm8nIGQ9J000LjAxNiAxMWwtLjY0OC0uOTQ2YTYuMjAyIDYuMjAyIDAgMCAwLS4xNTctLjIyIDkuNTI2IDkuNTI2IDAgMCAxLS4wOTYtLjEzM2wtLjUxMS0uN2E3LjQxMyA3LjQxMyAwIDAgMC0uMTYyLS4yMTRsLS4xMDItLjEzNC0uMjY1LS4zNDZhMjYuOTAzIDI2LjkwMyAwIDAgMC0uNTQzLS42ODdsLS4xMS0uMTM2Yy0uMTQzLS4xNzktLjI5MS0uMzYzLS40NDItLjU0bC0uMjc4LS4zMzJhOC44NTQgOC44NTQgMCAwIDAtLjE5Mi0uMjI1TC40MTcgNi4yOGwtLjI4My0uMzI0TDAgNS44MDVsMS4zNzYtMS42MDJjLjA0LjAyNy4xODYuMTMyLjE4Ni4xMzJsLjM3Ny4yNzIuMTI5LjA5NWMuMDguMDU4LjE2LjExNS4yMzcuMTc1bC4zNy4yOGMuMTkyLjE0Mi4zODIuMjkyLjU2NS40MzZsLjE2Mi4xMjZjLjI3LjIxLjUwMy4zOTguNzE0LjU3NGwuNDc3LjM5M2MuMDc4LjA2NC4xNTYuMTI3LjIzLjE5NGwuNDMzLjM3NS4xNzEtLjIwNUE1MC44NjUgNTAuODY1IDAgMCAxIDguMTggNC4wMjNhMzUuMTYzIDM1LjE2MyAwIDAgMSAyLjM4Mi0yLjIxM2MuMjA3LS4xNzQuNDItLjM0OS42MzUtLjUxOGwuMzI4LS4yNTUuMzMzLS4yNDVjLjA3Mi0uMDU1LjE0Ni0uMTA3LjIyMS0uMTU5bC4xMTctLjA4M2MuMTEtLjA3Ny4yMjUtLjE1NS4zNDEtLjIzLjE2My0uMTEuMzM0LS4yMTcuNTAzLS4zMmwxLjE1OCAxLjc0YTExLjkwOCAxMS45MDggMCAwIDAtLjY0LjU1bC0uMDY1LjA2Yy0uMDcuMDYyLS4xMzkuMTI1LS4yMDcuMTkybC0uMjU4LjI0OS0uMjYuMjY1Yy0uMTczLjE3Ni0uMzQ1LjM1Ny0uNTEyLjUzOWEzMi42MjYgMzIuNjI2IDAgMCAwLTEuOTE1IDIuMzEzIDUyLjExNSA1Mi4xMTUgMCAwIDAtMi41NzIgMy43NDZsLS4zOTIuNjQyLS4xOS4zMjItLjIzMy4zODJINC4wMTZ6Jy8+PC9zdmc+XCIpO1xuICB9XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzQ2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZURhbmdlcn07XG5gO1xuXG5jb25zdCBUb29sYmFyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5jbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGVwbG95UHJldmlldzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzaG93RGVsZXRlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3Nob3dEZWxldGUgPyAoXG4gICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0gTWFwKCksIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHVybCA9IGRlcGxveVByZXZpZXcuZ2V0KCd1cmwnKTtcbiAgICBjb25zdCBzdGF0dXMgPSBkZXBsb3lQcmV2aWV3LmdldCgnc3RhdHVzJyk7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRmV0Y2hpbmcgPSBkZXBsb3lQcmV2aWV3LmdldCgnaXNGZXRjaGluZycpO1xuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25QZXJzaXN0QW5kTmV3LFxuICAgICAgb25QZXJzaXN0QW5kRHVwbGljYXRlLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjYW5DcmVhdGUgPSBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJyk7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmICFoYXNDaGFuZ2VkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFB1Ymxpc2hlZEJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICA8L1B1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmROZXd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25EZWxldGUsXG4gICAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvbiBrZXk9XCJzYXZlLWJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IGhhc0NoYW5nZWQgJiYgb25QZXJzaXN0KCl9PlxuICAgICAgICB7aXNQZXJzaXN0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2aW5nJykgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZlJyl9XG4gICAgICA8L1NhdmVCdXR0b24+LFxuICAgICAgIXNob3dEZWxldGUgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaXNVcGRhdGluZ1N0YXR1cyxcbiAgICAgIGlzUHVibGlzaGluZyxcbiAgICAgIG9uQ2hhbmdlU3RhdHVzLFxuICAgICAgb25QdWJsaXNoLFxuICAgICAgdW5QdWJsaXNoLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBvblB1Ymxpc2hBbmROZXcsXG4gICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGUsXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzVXBkYXRpbmdTdGF0dXNcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudXBkYXRpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zZXRTdGF0dXMnKX1cbiAgICAgICAgICAgICAgPC9TdGF0dXNCdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdEUkFGVCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUkVWSUVXJyl9XG4gICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyA/IChcbiAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19QVUJMSVNIJyl9XG4gICAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIHtpc1B1Ymxpc2hpbmdcbiAgICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hOb3cnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNofVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uRHVwbGljYXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyLCBoYXNDaGFuZ2VkLCBkaXNwbGF5VXJsLCBjb2xsZWN0aW9uLCBoYXNXb3JrZmxvdywgb25Mb2dvdXRDbGljaywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfWB9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzKCkgOiB0aGlzLnJlbmRlclNpbXBsZVNhdmVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */"));
const ToolbarSubSectionFirst = (0, _styledBase.default)("div", {
  target: "evqrzhe2",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "70qvj9",
  styles: "display:flex;align-items:center;"
} : {
  name: "70qvj9",
  styles: "display:flex;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarSubSectionFirst, {
  target: "evqrzhe3",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1a9getn",
  styles: "justify-content:flex-end;"
} : {
  name: "1a9getn",
  styles: "justify-content:flex-end;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = (
/*#__PURE__*/
0, _styledBase.default)(_reactRouterDom.Link, {
  target: "evqrzhe4",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = (0, _styledBase.default)("div", {
  target: "evqrzhe5",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.Dropdown, {
  target: "evqrzhe6",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = (0, _styledBase.default)("div", {
  target: "evqrzhe7",
  label: "BackArrow"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = (0, _styledBase.default)("div", {
  target: "evqrzhe8",
  label: "BackCollection"
})("color:", _netlifyCmsUiDefault.colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = (0, _styledBase.default)("div", {
  target: "evqrzhe9",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "19ug521",
  styles: "margin-top:6px;"
} : {
  name: "19ug521",
  styles: "margin-top:6px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = (
/*#__PURE__*/
0, _styledBase.default)(BackStatus, {
  target: "evqrzhe10",
  label: "BackStatusUnchanged"
})(_netlifyCmsUiDefault.components.textBadgeSuccess, ";&::after{height:12px;width:15.5px;color:", _netlifyCmsUiDefault.colors.successText, ";margin-left:5px;position:relative;top:1px;content:url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' width='15' height='11'><path fill='#005614' fill-rule='nonzero' d='M4.016 11l-.648-.946a6.202 6.202 0 0 0-.157-.22 9.526 9.526 0 0 1-.096-.133l-.511-.7a7.413 7.413 0 0 0-.162-.214l-.102-.134-.265-.346a26.903 26.903 0 0 0-.543-.687l-.11-.136c-.143-.179-.291-.363-.442-.54l-.278-.332a8.854 8.854 0 0 0-.192-.225L.417 6.28l-.283-.324L0 5.805l1.376-1.602c.04.027.186.132.186.132l.377.272.129.095c.08.058.16.115.237.175l.37.28c.192.142.382.292.565.436l.162.126c.27.21.503.398.714.574l.477.393c.078.064.156.127.23.194l.433.375.171-.205A50.865 50.865 0 0 1 8.18 4.023a35.163 35.163 0 0 1 2.382-2.213c.207-.174.42-.349.635-.518l.328-.255.333-.245c.072-.055.146-.107.221-.159l.117-.083c.11-.077.225-.155.341-.23.163-.11.334-.217.503-.32l1.158 1.74a11.908 11.908 0 0 0-.64.55l-.065.06c-.07.062-.139.125-.207.192l-.258.249-.26.265c-.173.176-.345.357-.512.539a32.626 32.626 0 0 0-1.915 2.313 52.115 52.115 0 0 0-2.572 3.746l-.392.642-.19.322-.233.382H4.016z'/></svg>\");}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = (
/*#__PURE__*/
0, _styledBase.default)(BackStatus, {
  target: "evqrzhe11",
  label: "BackStatusChanged"
})(_netlifyCmsUiDefault.components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarButton = (0, _styledBase.default)("button", {
  target: "evqrzhe12",
  label: "ToolbarButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", styles.buttonMargin, ";display:block;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DeleteButton = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe13",
  label: "DeleteButton"
})(_netlifyCmsUiDefault.buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe14",
  label: "SaveButton"
})(_netlifyCmsUiDefault.buttons.lightBlue, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe15",
  label: "PublishedToolbarButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishedButton = (
/*#__PURE__*/
0, _styledBase.default)(ToolbarButton, {
  target: "evqrzhe16",
  label: "PublishedButton"
})(styles.publishedButton, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const PublishButton = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe17",
  label: "PublishButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBKa0QiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBib3gtc2hhZG93OiAwIDJweCA2cHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMDUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMSksXG4gICAgMCAycHggNTRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgei1pbmRleDogMzAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcblxuICAmOjphZnRlciB7XG4gICAgaGVpZ2h0OiAxMnB4O1xuICAgIHdpZHRoOiAxNS41cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuXG4gICAgY29udGVudDogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sOyB1dGY4LCA8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzE1JyBoZWlnaHQ9JzExJz48cGF0aCBmaWxsPScjMDA1NjE0JyBmaWxsLXJ1bGU9J25vbnplcm8nIGQ9J000LjAxNiAxMWwtLjY0OC0uOTQ2YTYuMjAyIDYuMjAyIDAgMCAwLS4xNTctLjIyIDkuNTI2IDkuNTI2IDAgMCAxLS4wOTYtLjEzM2wtLjUxMS0uN2E3LjQxMyA3LjQxMyAwIDAgMC0uMTYyLS4yMTRsLS4xMDItLjEzNC0uMjY1LS4zNDZhMjYuOTAzIDI2LjkwMyAwIDAgMC0uNTQzLS42ODdsLS4xMS0uMTM2Yy0uMTQzLS4xNzktLjI5MS0uMzYzLS40NDItLjU0bC0uMjc4LS4zMzJhOC44NTQgOC44NTQgMCAwIDAtLjE5Mi0uMjI1TC40MTcgNi4yOGwtLjI4My0uMzI0TDAgNS44MDVsMS4zNzYtMS42MDJjLjA0LjAyNy4xODYuMTMyLjE4Ni4xMzJsLjM3Ny4yNzIuMTI5LjA5NWMuMDguMDU4LjE2LjExNS4yMzcuMTc1bC4zNy4yOGMuMTkyLjE0Mi4zODIuMjkyLjU2NS40MzZsLjE2Mi4xMjZjLjI3LjIxLjUwMy4zOTguNzE0LjU3NGwuNDc3LjM5M2MuMDc4LjA2NC4xNTYuMTI3LjIzLjE5NGwuNDMzLjM3NS4xNzEtLjIwNUE1MC44NjUgNTAuODY1IDAgMCAxIDguMTggNC4wMjNhMzUuMTYzIDM1LjE2MyAwIDAgMSAyLjM4Mi0yLjIxM2MuMjA3LS4xNzQuNDItLjM0OS42MzUtLjUxOGwuMzI4LS4yNTUuMzMzLS4yNDVjLjA3Mi0uMDU1LjE0Ni0uMTA3LjIyMS0uMTU5bC4xMTctLjA4M2MuMTEtLjA3Ny4yMjUtLjE1NS4zNDEtLjIzLjE2My0uMTEuMzM0LS4yMTcuNTAzLS4zMmwxLjE1OCAxLjc0YTExLjkwOCAxMS45MDggMCAwIDAtLjY0LjU1bC0uMDY1LjA2Yy0uMDcuMDYyLS4xMzkuMTI1LS4yMDcuMTkybC0uMjU4LjI0OS0uMjYuMjY1Yy0uMTczLjE3Ni0uMzQ1LjM1Ny0uNTEyLjUzOWEzMi42MjYgMzIuNjI2IDAgMCAwLTEuOTE1IDIuMzEzIDUyLjExNSA1Mi4xMTUgMCAwIDAtMi41NzIgMy43NDZsLS4zOTIuNjQyLS4xOS4zMjItLjIzMy4zODJINC4wMTZ6Jy8+PC9zdmc+XCIpO1xuICB9XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzQ2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZURhbmdlcn07XG5gO1xuXG5jb25zdCBUb29sYmFyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5jbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGVwbG95UHJldmlldzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzaG93RGVsZXRlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3Nob3dEZWxldGUgPyAoXG4gICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0gTWFwKCksIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHVybCA9IGRlcGxveVByZXZpZXcuZ2V0KCd1cmwnKTtcbiAgICBjb25zdCBzdGF0dXMgPSBkZXBsb3lQcmV2aWV3LmdldCgnc3RhdHVzJyk7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRmV0Y2hpbmcgPSBkZXBsb3lQcmV2aWV3LmdldCgnaXNGZXRjaGluZycpO1xuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25QZXJzaXN0QW5kTmV3LFxuICAgICAgb25QZXJzaXN0QW5kRHVwbGljYXRlLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjYW5DcmVhdGUgPSBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJyk7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmICFoYXNDaGFuZ2VkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFB1Ymxpc2hlZEJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICA8L1B1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmROZXd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25EZWxldGUsXG4gICAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvbiBrZXk9XCJzYXZlLWJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IGhhc0NoYW5nZWQgJiYgb25QZXJzaXN0KCl9PlxuICAgICAgICB7aXNQZXJzaXN0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2aW5nJykgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZlJyl9XG4gICAgICA8L1NhdmVCdXR0b24+LFxuICAgICAgIXNob3dEZWxldGUgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaXNVcGRhdGluZ1N0YXR1cyxcbiAgICAgIGlzUHVibGlzaGluZyxcbiAgICAgIG9uQ2hhbmdlU3RhdHVzLFxuICAgICAgb25QdWJsaXNoLFxuICAgICAgdW5QdWJsaXNoLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBvblB1Ymxpc2hBbmROZXcsXG4gICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGUsXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzVXBkYXRpbmdTdGF0dXNcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudXBkYXRpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zZXRTdGF0dXMnKX1cbiAgICAgICAgICAgICAgPC9TdGF0dXNCdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdEUkFGVCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUkVWSUVXJyl9XG4gICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyA/IChcbiAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19QVUJMSVNIJyl9XG4gICAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIHtpc1B1Ymxpc2hpbmdcbiAgICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hOb3cnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNofVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uRHVwbGljYXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyLCBoYXNDaGFuZ2VkLCBkaXNwbGF5VXJsLCBjb2xsZWN0aW9uLCBoYXNXb3JrZmxvdywgb25Mb2dvdXRDbGljaywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfWB9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzKCkgOiB0aGlzLnJlbmRlclNpbXBsZVNhdmVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */"));
const StatusButton = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "evqrzhe18",
  label: "StatusButton"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.tealLight, ";color:", _netlifyCmsUiDefault.colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = (0, _styledBase.default)("div", {
  target: "evqrzhe19",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";display:flex;align-items:center;a,", _netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colorsRaw.blue, ";}", _netlifyCmsUiDefault.Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1LeUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgU2V0dGluZ3NEcm9wZG93biBmcm9tICdVSS9TZXR0aW5nc0Ryb3Bkb3duJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b25NYXJnaW46IGNzc2BcbiAgICBtYXJnaW46IDAgMTBweDtcbiAgYCxcbiAgdG9vbGJhclNlY3Rpb246IGNzc2BcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGJvcmRlcjogMCBzb2xpZCAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBgLFxuICBwdWJsaXNoZWRCdXR0b246IGNzc2BcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICAgIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbiAgYCxcbn07XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBib3gtc2hhZG93OiAwIDJweCA2cHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMDUpLCAwIDFweCAzcHggMCByZ2JhKDY4LCA3NCwgODcsIDAuMSksXG4gICAgMCAycHggNTRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgbWluLXdpZHRoOiA4MDBweDtcbiAgei1pbmRleDogMzAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcblxuICAmOjphZnRlciB7XG4gICAgaGVpZ2h0OiAxMnB4O1xuICAgIHdpZHRoOiAxNS41cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnN1Y2Nlc3NUZXh0fTtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuXG4gICAgY29udGVudDogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sOyB1dGY4LCA8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzE1JyBoZWlnaHQ9JzExJz48cGF0aCBmaWxsPScjMDA1NjE0JyBmaWxsLXJ1bGU9J25vbnplcm8nIGQ9J000LjAxNiAxMWwtLjY0OC0uOTQ2YTYuMjAyIDYuMjAyIDAgMCAwLS4xNTctLjIyIDkuNTI2IDkuNTI2IDAgMCAxLS4wOTYtLjEzM2wtLjUxMS0uN2E3LjQxMyA3LjQxMyAwIDAgMC0uMTYyLS4yMTRsLS4xMDItLjEzNC0uMjY1LS4zNDZhMjYuOTAzIDI2LjkwMyAwIDAgMC0uNTQzLS42ODdsLS4xMS0uMTM2Yy0uMTQzLS4xNzktLjI5MS0uMzYzLS40NDItLjU0bC0uMjc4LS4zMzJhOC44NTQgOC44NTQgMCAwIDAtLjE5Mi0uMjI1TC40MTcgNi4yOGwtLjI4My0uMzI0TDAgNS44MDVsMS4zNzYtMS42MDJjLjA0LjAyNy4xODYuMTMyLjE4Ni4xMzJsLjM3Ny4yNzIuMTI5LjA5NWMuMDguMDU4LjE2LjExNS4yMzcuMTc1bC4zNy4yOGMuMTkyLjE0Mi4zODIuMjkyLjU2NS40MzZsLjE2Mi4xMjZjLjI3LjIxLjUwMy4zOTguNzE0LjU3NGwuNDc3LjM5M2MuMDc4LjA2NC4xNTYuMTI3LjIzLjE5NGwuNDMzLjM3NS4xNzEtLjIwNUE1MC44NjUgNTAuODY1IDAgMCAxIDguMTggNC4wMjNhMzUuMTYzIDM1LjE2MyAwIDAgMSAyLjM4Mi0yLjIxM2MuMjA3LS4xNzQuNDItLjM0OS42MzUtLjUxOGwuMzI4LS4yNTUuMzMzLS4yNDVjLjA3Mi0uMDU1LjE0Ni0uMTA3LjIyMS0uMTU5bC4xMTctLjA4M2MuMTEtLjA3Ny4yMjUtLjE1NS4zNDEtLjIzLjE2My0uMTEuMzM0LS4yMTcuNTAzLS4zMmwxLjE1OCAxLjc0YTExLjkwOCAxMS45MDggMCAwIDAtLjY0LjU1bC0uMDY1LjA2Yy0uMDcuMDYyLS4xMzkuMTI1LS4yMDcuMTkybC0uMjU4LjI0OS0uMjYuMjY1Yy0uMTczLjE3Ni0uMzQ1LjM1Ny0uNTEyLjUzOWEzMi42MjYgMzIuNjI2IDAgMCAwLTEuOTE1IDIuMzEzIDUyLjExNSA1Mi4xMTUgMCAwIDAtMi41NzIgMy43NDZsLS4zOTIuNjQyLS4xOS4zMjItLjIzMy4zODJINC4wMTZ6Jy8+PC9zdmc+XCIpO1xuICB9XG5gO1xuXG5jb25zdCBCYWNrU3RhdHVzQ2hhbmdlZCA9IHN0eWxlZChCYWNrU3RhdHVzKWBcbiAgJHtjb21wb25lbnRzLnRleHRCYWRnZURhbmdlcn07XG5gO1xuXG5jb25zdCBUb29sYmFyQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5kZWZhdWx0fTtcbiAgJHtzdHlsZXMuYnV0dG9uTWFyZ2lufTtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBEZWxldGVCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7YnV0dG9ucy5saWdodFJlZH07XG5gO1xuXG5jb25zdCBTYXZlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRCbHVlfTtcbmA7XG5cbmNvbnN0IFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRCdXR0b24gPSBzdHlsZWQoVG9vbGJhckJ1dHRvbilgXG4gICR7c3R5bGVzLnB1Ymxpc2hlZEJ1dHRvbn1cbmA7XG5cbmNvbnN0IFB1Ymxpc2hCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFN0YXR1c0J1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LnRlYWxMaWdodH07XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsfTtcbmA7XG5cbmNvbnN0IFByZXZpZXdCdXR0b25Db250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICBhLFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIH1cblxuICAke0ljb259IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgdG9wOiAxcHg7XG4gIH1cbmA7XG5cbmNvbnN0IFJlZnJlc2hQcmV2aWV3QnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZDogbm9uZTtcbiAgYm9yZGVyOiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGNvbG9yOiAke2NvbG9yc1Jhdy5ibHVlfTtcblxuICBzcGFuIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDZweDtcbiAgfVxuYDtcblxuY29uc3QgUHJldmlld0xpbmsgPSBSZWZyZXNoUHJldmlld0J1dHRvbi53aXRoQ29tcG9uZW50KCdhJyk7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5jbGFzcyBFZGl0b3JUb29sYmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBpc1BlcnNpc3Rpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzUHVibGlzaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNVcGRhdGluZ1N0YXR1czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNEZWxldGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgb25QZXJzaXN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUGVyc2lzdEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2hvd0RlbGV0ZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdW5QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uUHVibGlzaEFuZE5ldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc0NoYW5nZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc3BsYXlVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGhhc1dvcmtmbG93OiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTmV3RW50cnk6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjdXJyZW50U3RhdHVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG9uTG9nb3V0Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGVwbG95UHJldmlldzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBsb2FkRGVwbG95UHJldmlldzogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzaG93RGVsZXRlLCBvbkRlbGV0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3Nob3dEZWxldGUgPyAoXG4gICAgICAgICAgPERlbGV0ZUJ1dHRvbiBvbkNsaWNrPXtvbkRlbGV0ZX0+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZUVudHJ5Jyl9PC9EZWxldGVCdXR0b24+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJEZXBsb3lQcmV2aWV3Q29udHJvbHMgPSBsYWJlbCA9PiB7XG4gICAgY29uc3QgeyBkZXBsb3lQcmV2aWV3ID0gTWFwKCksIGxvYWREZXBsb3lQcmV2aWV3LCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHVybCA9IGRlcGxveVByZXZpZXcuZ2V0KCd1cmwnKTtcbiAgICBjb25zdCBzdGF0dXMgPSBkZXBsb3lQcmV2aWV3LmdldCgnc3RhdHVzJyk7XG5cbiAgICBpZiAoIXN0YXR1cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRmV0Y2hpbmcgPSBkZXBsb3lQcmV2aWV3LmdldCgnaXNGZXRjaGluZycpO1xuICAgIGNvbnN0IGRlcGxveVByZXZpZXdSZWFkeSA9IHN0YXR1cyA9PT0gJ1NVQ0NFU1MnICYmICFpc0ZldGNoaW5nO1xuICAgIHJldHVybiAoXG4gICAgICA8UHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAge2RlcGxveVByZXZpZXdSZWFkeSA/IChcbiAgICAgICAgICA8UHJldmlld0xpbmsgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9e3VybH0+XG4gICAgICAgICAgICA8c3Bhbj57bGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPEljb24gdHlwZT1cIm5ldy10YWJcIiBzaXplPVwieHNtYWxsXCIgLz5cbiAgICAgICAgICA8L1ByZXZpZXdMaW5rPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxSZWZyZXNoUHJldmlld0J1dHRvbiBvbkNsaWNrPXtsb2FkRGVwbG95UHJldmlld30+XG4gICAgICAgICAgICA8c3Bhbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVwbG95UHJldmlld1BlbmRpbmdCdXR0b25MYWJlbCcpfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJyZWZyZXNoXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9SZWZyZXNoUHJldmlld0J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvUHJldmlld0J1dHRvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25QZXJzaXN0QW5kTmV3LFxuICAgICAgb25QZXJzaXN0QW5kRHVwbGljYXRlLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjYW5DcmVhdGUgPSBjb2xsZWN0aW9uLmdldCgnY3JlYXRlJyk7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmICFoYXNDaGFuZ2VkKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE1MHB4XCJcbiAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkR1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFB1Ymxpc2hlZEJ1dHRvbj57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9PC9QdWJsaXNoZWRCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICA8L1B1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoTm93Jyl9XG4gICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmRDcmVhdGVOZXcnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmROZXd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uUGVyc2lzdEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dTYXZlQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb25QZXJzaXN0LFxuICAgICAgb25EZWxldGUsXG4gICAgICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcyxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIHQsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvbiBrZXk9XCJzYXZlLWJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IGhhc0NoYW5nZWQgJiYgb25QZXJzaXN0KCl9PlxuICAgICAgICB7aXNQZXJzaXN0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2aW5nJykgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zYXZlJyl9XG4gICAgICA8L1NhdmVCdXR0b24+LFxuICAgICAgIXNob3dEZWxldGUgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgaXNVcGRhdGluZ1N0YXR1cyxcbiAgICAgIGlzUHVibGlzaGluZyxcbiAgICAgIG9uQ2hhbmdlU3RhdHVzLFxuICAgICAgb25QdWJsaXNoLFxuICAgICAgdW5QdWJsaXNoLFxuICAgICAgb25EdXBsaWNhdGUsXG4gICAgICBvblB1Ymxpc2hBbmROZXcsXG4gICAgICBvblB1Ymxpc2hBbmREdXBsaWNhdGUsXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIHVzZU9wZW5BdXRob3JpbmcsXG4gICAgICBpc1BlcnNpc3RpbmcsXG4gICAgICB0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY2FuQ3JlYXRlID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpO1xuICAgIGlmIChjdXJyZW50U3RhdHVzKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lQcmV2aWV3QnV0dG9uTGFiZWwnKSl9XG4gICAgICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiNDBweFwiXG4gICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzVXBkYXRpbmdTdGF0dXNcbiAgICAgICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudXBkYXRpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5zZXRTdGF0dXMnKX1cbiAgICAgICAgICAgICAgPC9TdGF0dXNCdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0Jyl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdEUkFGVCcpID8gJ2NoZWNrJyA6IG51bGx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUkVWSUVXJyl9XG4gICAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7dXNlT3BlbkF1dGhvcmluZyA/IChcbiAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxTdGF0dXNEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19QVUJMSVNIJyl9XG4gICAgICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgPyAoXG4gICAgICAgICAgICAnJ1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTUwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8UHVibGlzaEJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIHtpc1B1Ymxpc2hpbmdcbiAgICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoaW5nJylcbiAgICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoJyl9XG4gICAgICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hOb3cnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYXJyb3dcIlxuICAgICAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNofVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaEFuZER1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17b25QdWJsaXNoQW5kRHVwbGljYXRlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaCBjb250cm9sIGZvciBwdWJsaXNoZWQgd29ya2Zsb3cgZW50cnkuXG4gICAgICovXG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgIHt0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKX1cbiAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICAgIGRyb3Bkb3duV2lkdGg9XCIxNTBweFwiXG4gICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+XG4gICAgICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgICAgOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoZWQnKX1cbiAgICAgICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmR1cGxpY2F0ZScpfVxuICAgICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uRHVwbGljYXRlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyLCBoYXNDaGFuZ2VkLCBkaXNwbGF5VXJsLCBjb2xsZWN0aW9uLCBoYXNXb3JrZmxvdywgb25Mb2dvdXRDbGljaywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VG9vbGJhckNvbnRhaW5lcj5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uQmFja0xpbmsgdG89e2AvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfWB9PlxuICAgICAgICAgIDxCYWNrQXJyb3c+4oaQPC9CYWNrQXJyb3c+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxCYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgICAge3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmJhY2tDb2xsZWN0aW9uJywge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MYWJlbDogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9CYWNrQ29sbGVjdGlvbj5cbiAgICAgICAgICAgIHtoYXNDaGFuZ2VkID8gKFxuICAgICAgICAgICAgICA8QmFja1N0YXR1c0NoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVuc2F2ZWRDaGFuZ2VzJyl9PC9CYWNrU3RhdHVzQ2hhbmdlZD5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzVW5jaGFuZ2VkPnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5jaGFuZ2VzU2F2ZWQnKX08L0JhY2tTdGF0dXNVbmNoYW5nZWQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L1Rvb2xiYXJTZWN0aW9uQmFja0xpbms+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgICAgPFRvb2xiYXJTdWJTZWN0aW9uRmlyc3Q+XG4gICAgICAgICAgICB7aGFzV29ya2Zsb3cgPyB0aGlzLnJlbmRlcldvcmtmbG93U2F2ZUNvbnRyb2xzKCkgOiB0aGlzLnJlbmRlclNpbXBsZVNhdmVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd1B1Ymxpc2hDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVQdWJsaXNoQ29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlci5nZXQoJ2F2YXRhcl91cmwnKX1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */"));
const RefreshPreviewButton = (0, _styledBase.default)("button", {
  target: "evqrzhe20",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", _netlifyCmsUiDefault.colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "evqrzhe22",
  label: "PreviewLink"
});
const StatusDropdownItem = (
/*#__PURE__*/
0, _styledBase.default)(_netlifyCmsUiDefault.DropdownItem, {
  target: "evqrzhe21",
  label: "StatusDropdownItem"
})(_netlifyCmsUiDefault.Icon, "{color:", _netlifyCmsUiDefault.colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class EditorToolbar extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "renderSimpleSaveControls", () => {
      const {
        showDelete,
        onDelete,
        t
      } = this.props;
      return (0, _core.jsx)("div", null, showDelete ? (0, _core.jsx)(DeleteButton, {
        onClick: onDelete
      }, t('editor.editorToolbar.deleteEntry')) : null);
    });

    _defineProperty(this, "renderDeployPreviewControls", label => {
      const {
        deployPreview = (0, _immutable.Map)(),
        loadDeployPreview,
        t
      } = this.props;
      const url = deployPreview.get('url');
      const status = deployPreview.get('status');

      if (!status) {
        return;
      }

      const isFetching = deployPreview.get('isFetching');
      const deployPreviewReady = status === 'SUCCESS' && !isFetching;
      return (0, _core.jsx)(PreviewButtonContainer, null, deployPreviewReady ? (0, _core.jsx)(PreviewLink, {
        rel: "noopener noreferrer",
        target: "_blank",
        href: url
      }, (0, _core.jsx)("span", null, label), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "new-tab",
        size: "xsmall"
      })) : (0, _core.jsx)(RefreshPreviewButton, {
        onClick: loadDeployPreview
      }, (0, _core.jsx)("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
        type: "refresh",
        size: "xsmall"
      })));
    });

    _defineProperty(this, "renderSimplePublishControls", () => {
      const {
        collection,
        onPersist,
        onPersistAndNew,
        onPersistAndDuplicate,
        onDuplicate,
        isPersisting,
        hasChanged,
        isNewEntry,
        t
      } = this.props;
      const canCreate = collection.get('create');

      if (!isNewEntry && !hasChanged) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), canCreate ? (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.duplicate'),
          icon: "add",
          onClick: onDuplicate
        })) : (0, _core.jsx)(PublishedButton, null, t('editor.editorToolbar.published')));
      }

      return (0, _core.jsx)("div", null, (0, _core.jsx)(ToolbarDropdown, {
        dropdownTopOverlap: "40px",
        dropdownWidth: "150px",
        renderButton: () => (0, _core.jsx)(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
      }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishNow'),
        icon: "arrow",
        iconDirection: "right",
        onClick: onPersist
      }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndCreateNew'),
        icon: "add",
        onClick: onPersistAndNew
      }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
        label: t('editor.editorToolbar.publishAndDuplicate'),
        icon: "add",
        onClick: onPersistAndDuplicate
      })) : null));
    });

    _defineProperty(this, "renderWorkflowSaveControls", () => {
      const {
        onPersist,
        onDelete,
        onDeleteUnpublishedChanges,
        showDelete,
        hasChanged,
        hasUnpublishedChanges,
        isPersisting,
        isDeleting,
        isNewEntry,
        isModification,
        t
      } = this.props;
      const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
      return [(0, _core.jsx)(SaveButton, {
        key: "save-button",
        onClick: () => hasChanged && onPersist()
      }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), !showDelete && !hasUnpublishedChanges && !isModification ? null : (0, _core.jsx)(DeleteButton, {
        key: "delete-button",
        onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
      }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
    });

    _defineProperty(this, "renderWorkflowPublishControls", () => {
      const {
        collection,
        isUpdatingStatus,
        isPublishing,
        onChangeStatus,
        onPublish,
        unPublish,
        onDuplicate,
        onPublishAndNew,
        onPublishAndDuplicate,
        currentStatus,
        isNewEntry,
        useOpenAuthoring,
        isPersisting,
        t
      } = this.props;
      const canCreate = collection.get('create');

      if (currentStatus) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel')), (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "120px",
          renderButton: () => (0, _core.jsx)(StatusButton, null, isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.setStatus'))
        }, (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.draft'),
          onClick: () => onChangeStatus('DRAFT'),
          icon: currentStatus === _publishModes.status.get('DRAFT') ? 'check' : null
        }), (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.inReview'),
          onClick: () => onChangeStatus('PENDING_REVIEW'),
          icon: currentStatus === _publishModes.status.get('PENDING_REVIEW') ? 'check' : null
        }), useOpenAuthoring ? '' : (0, _core.jsx)(StatusDropdownItem, {
          label: t('editor.editorToolbar.ready'),
          onClick: () => onChangeStatus('PENDING_PUBLISH'),
          icon: currentStatus === _publishModes.status.get('PENDING_PUBLISH') ? 'check' : null
        })), useOpenAuthoring ? '' : (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishNow'),
          icon: "arrow",
          iconDirection: "right",
          onClick: onPublish
        }), canCreate ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishAndCreateNew'),
          icon: "add",
          onClick: onPublishAndNew
        }), (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.publishAndDuplicate'),
          icon: "add",
          onClick: onPublishAndDuplicate
        })) : null));
      }
      /**
       * Publish control for published workflow entry.
       */


      if (!isNewEntry) {
        return (0, _core.jsx)(_react.default.Fragment, null, this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel')), (0, _core.jsx)(ToolbarDropdown, {
          dropdownTopOverlap: "40px",
          dropdownWidth: "150px",
          renderButton: () => (0, _core.jsx)(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
        }, (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.unpublish'),
          icon: "arrow",
          iconDirection: "right",
          onClick: unPublish
        }), canCreate && (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
          label: t('editor.editorToolbar.duplicate'),
          icon: "add",
          onClick: onDuplicate
        })));
      }
    });
  }

  componentDidMount() {
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;

    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }

  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t
    } = this.props;
    return (0, _core.jsx)(ToolbarContainer, null, (0, _core.jsx)(ToolbarSectionBackLink, {
      to: "/collections/".concat(collection.get('name'))
    }, (0, _core.jsx)(BackArrow, null, "\u2190"), (0, _core.jsx)("div", null, (0, _core.jsx)(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? (0, _core.jsx)(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : (0, _core.jsx)(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), (0, _core.jsx)(ToolbarSectionMain, null, (0, _core.jsx)(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowSaveControls() : this.renderSimpleSaveControls()), (0, _core.jsx)(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowPublishControls() : this.renderSimplePublishControls())), (0, _core.jsx)(ToolbarSectionMeta, null, (0, _core.jsx)(_SettingsDropdown.default, {
      displayUrl: displayUrl,
      imageUrl: user.get('avatar_url'),
      onLogoutClick: onLogoutClick
    })));
  }

}

_defineProperty(EditorToolbar, "propTypes", {
  isPersisting: _propTypes.default.bool,
  isPublishing: _propTypes.default.bool,
  isUpdatingStatus: _propTypes.default.bool,
  isDeleting: _propTypes.default.bool,
  onPersist: _propTypes.default.func.isRequired,
  onPersistAndNew: _propTypes.default.func.isRequired,
  onPersistAndDuplicate: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  unPublish: _propTypes.default.func.isRequired,
  onDuplicate: _propTypes.default.func.isRequired,
  onPublishAndNew: _propTypes.default.func.isRequired,
  onPublishAndDuplicate: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  collection: _reactImmutableProptypes.default.map.isRequired,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

var _default = (0, _reactPolyglot.translate)()(EditorToolbar);

exports.default = _default;