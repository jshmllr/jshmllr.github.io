'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _open = require('open');

var _open2 = _interopRequireDefault(_open);

var _treeKill = require('tree-kill');

var _treeKill2 = _interopRequireDefault(_treeKill);

var _log = require('../utils/log');

var _text = require('../utils/text');

var _styles = require('../utils/styles');

var _emojis = require('../utils/emojis');

var _actions = require('../utils/actions');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function devServerStep(guideContext) {
  guideContext.stepCount++;
  const { installationDirectory, activeGuide, stepCount } = guideContext;
  (0, _log.log)();
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.wrappedLog)(`${(0, _emojis.generateNumberEmoji)(stepCount)} Run the website in development mode on your machine`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.log)();
  (0, _log.log)(`${(0, _styles.highlightStyle)('Almost done!')} Your ${activeGuide.name} has been set up on your local machine. It will now be started by running: ${(0, _styles.codeStyle)(`${activeGuide.devExecutable} ${activeGuide.devParameters.join(' ')}`)}`);
  (0, _log.log)();
  (0, _log.wrappedLog)(`A browser will open showing your new ${activeGuide.name}. Feel free to make changes to the code and see them appear immediately.`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)();
  (0, _log.wrappedLog)(`You may exit development mode by pressing the Q or CTRL+C`, _helpers.GUIDE_MAX_WIDTH);

  const confirmDevServer = await (0, _actions.confirmation)(`Run ${activeGuide.name} locally in development mode now?`);
  (0, _log.log)();

  if (!confirmDevServer) {
    throw new _helpers.AbortedError();
  }

  const task = (0, _execa2.default)(activeGuide.devExecutable, activeGuide.devParameters, {
    cwd: installationDirectory
  });
  let errorThrown = true;

  task.stdout.pipe(process.stdout);

  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  if ('setRawMode' in process.stdin) {
    process.stdin.setRawMode(true);
  }

  const killer = key => {
    if (['\u0003', 'q', 'Q'].includes(key)) {
      errorThrown = false;
      (0, _treeKill2.default)(task.pid);
    }
  };

  process.stdin.on('data', killer);

  try {
    // Open dev server as soon the first build finished
    const opener = data => {
      const str = data.toString();
      if (activeGuide.devBrowserOpenRegex.test(str)) {
        // We open the browser window only on Windows and OSX since this might fail or open the wrong browser on Linux.
        if (['win32', 'darwin'].includes(process.platform)) {
          (0, _open2.default)(activeGuide.devURI, {
            wait: false
          });
        } else {
          (0, _log.log)(`You can find the running website at ${(0, _styles.pathStyle)(activeGuide.devURI)}`);
        }

        task.stdout.removeListener('data', opener);
      }
    };
    task.stdout.on('data', opener);
    await task;
  } catch (err) {
    // Log error only when process got not killed by user
    if (errorThrown) {
      (0, _log.logError)(err);
    }
  } finally {
    process.stdin.removeListener('data', killer);
    if ('setRawMode' in process.stdin) {
      process.stdin.setRawMode(false);
    }
    process.stdin.pause();
  }
};