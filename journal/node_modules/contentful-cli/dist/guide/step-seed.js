'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _shellEscape = require('shell-escape');

var _shellEscape2 = _interopRequireDefault(_shellEscape);

var _seed = require('../cmds/space_cmds/seed');

var _log = require('../utils/log');

var _text = require('../utils/text');

var _context = require('../context');

var _styles = require('../utils/styles');

var _emojis = require('../utils/emojis');

var _actions = require('../utils/actions');

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function seedStep(guideContext) {
  guideContext.stepCount++;

  const { stepCount, spaceId, activeGuide } = guideContext;

  const seedSpaceCommand = ['contentful', 'space', 'seed', '--template', activeGuide.seed, '--space-id', spaceId];

  (0, _log.log)();
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.wrappedLog)(`${(0, _emojis.generateNumberEmoji)(stepCount)} Create your Content model and first Entries`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)((0, _text.separator)(_helpers.GUIDE_MAX_WIDTH));
  (0, _log.log)();
  (0, _log.log)(`Next, weâ€™ll add blog content to your Space. It will be structured as ${(0, _styles.highlightStyle)('Persons')} and ${(0, _styles.highlightStyle)('Blog Posts')}.`);
  (0, _log.log)();
  (0, _log.wrappedLog)(`We'll proceed with the following command ${(0, _styles.codeStyle)((0, _shellEscape2.default)(seedSpaceCommand))}.`, _helpers.GUIDE_MAX_WIDTH);
  (0, _log.log)();

  const confirmSpaceSeed = await (0, _actions.confirmation)('Populate the Content model to your Space now?');
  (0, _log.log)();

  if (!confirmSpaceSeed) {
    throw new _helpers.AbortedError();
  }

  const context = await (0, _context.getContext)();

  await (0, _seed.spaceSeed)({
    template: activeGuide.seed,
    yes: true,
    feature: 'guide',
    context: _extends({ activeSpaceId: spaceId }, context)
  });
};