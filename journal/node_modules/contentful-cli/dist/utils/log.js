'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = log;
exports.wrappedLog = wrappedLog;
exports.warning = warning;
exports.success = success;
exports.error = error;
exports.logError = logError;

var _styles = require('./styles');

var _emojis = require('./emojis');

var _text = require('./text');

var _error = require('./error');

function log(...args) {
  console.log(...args);
}

function wrappedLog(text, columns) {
  log((0, _text.wrap)(text, columns));
}

function warning(...args) {
  const styledArgs = args.map(arg => (0, _styles.warningStyle)(arg));
  console.log(...styledArgs);
}

function success(...args) {
  const styledArgs = args.map(arg => (0, _styles.successStyle)(arg));
  console.log(...styledArgs);
}

function error(...args) {
  const styledArgs = args.map(arg => (0, _styles.errorStyle)(arg));
  console.error(...styledArgs);
}

function logError(error) {
  try {
    if (!error.hasOwnProperty('message')) {
      throw error;
    }
    const parsedError = JSON.parse(error.message);
    console.error((0, _text.wrap)((0, _styles.errorStyle)(`${_emojis.errorEmoji} Error: ${parsedError.message}`)));
    if (parsedError.details && parsedError.details.errors) {
      parsedError.details.errors.forEach(errItem => {
        if (errItem.path && errItem.details) {
          console.error((0, _styles.errorStyle)(`${errItem.details} at ${errItem.path.join('/')}`));
        }
      });
    }
    console.error((0, _text.frame)(JSON.stringify(parsedError, null, '\t')));
  } catch (parseError) {
    console.error((0, _text.wrap)((0, _styles.errorStyle)(`${_emojis.errorEmoji} Error: ${error.message}`)));
    if ('stack' in error && !(error instanceof _error.PreconditionFailedError)) {
      console.error((0, _text.frame)(error.stack.toString()));
    }
  }
}