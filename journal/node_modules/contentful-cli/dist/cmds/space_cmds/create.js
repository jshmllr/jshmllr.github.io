'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.spaceCreate = spaceCreate;

var _log = require('../../utils/log');

var logging = _interopRequireWildcard(_log);

var _async = require('../../utils/async');

var _contentfulClients = require('../../utils/contentful-clients');

var _use = require('./use');

var _events = require('../../core/events');

var _scopes = require('../../core/events/scopes');

var _styles = require('../../utils/styles');

var _actions = require('../../utils/actions');

var _intents = require('../../core/event-handlers/intents');

var _intents2 = _interopRequireDefault(_intents);

var _logging = require('../../core/event-handlers/logging');

var _logging2 = _interopRequireDefault(_logging);

var _createSpaceHandler = require('../../core/event-handlers/intents/create-space-handler');

var _createSpaceHandler2 = _interopRequireDefault(_createSpaceHandler);

var _createSpaceHandler3 = require('../../core/event-handlers/logging/create-space-handler');

var _createSpaceHandler4 = _interopRequireDefault(_createSpaceHandler3);

var _helpers = require('../../guide/helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const command = exports.command = 'create';

const desc = exports.desc = 'Create a space';

const builder = exports.builder = yargs => {
  return yargs.usage("Usage: contentful space create --name 'Your Space Name'").option('name', {
    alias: 'n',
    describe: 'Name of the space to create',
    demandOption: true
  }).option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('organization-id', {
    alias: 'org',
    describe: 'Organization owning the new space'
  }).option('yes', {
    alias: 'y',
    describe: 'Confirm space creation without prompt, be aware this may result in extra monthly charges depend on your subscription'
  }).option('default-locale', {
    alias: 'l',
    describe: 'The default locale of the new space',
    type: 'string'
  }).option('use', {
    alias: 'u',
    describe: 'Use the created space as default space when the --space-id is skipped.',
    type: 'boolean'
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function spaceCreate(argv) {
  const { context, name, defaultLocale, yes, use, feature = 'space-create' } = argv;

  const { managementToken } = context;
  let { organizationId } = argv;
  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature
  });

  logging.log((0, _styles.warningStyle)(`Please be aware that adding new spaces to your subscription,
beyond the free ‘Micro’ space included in each subscription,
will result in extra monthly charges.
More information on available space types and their prices can be found on
the Pricing page: https://www.contentful.com/pricing/?faq_category=payments&faq=what-type-of-spaces-can-i-have#what-type-of-spaces-can-i-have`));

  let confirm = false;
  if (!yes) {
    confirm = await (0, _actions.confirmation)(`Do you want to confirm the space creation?`);
  } else {
    confirm = true;
  }

  logging.log();

  if (!confirm) {
    logging.log((0, _styles.warningStyle)(`Space creation aborted.`));
    throw new _helpers.AbortedError();
  }

  const intentSystem = new _intents2.default();
  intentSystem.addHandler((0, _createSpaceHandler2.default)({
    skipConfirm: yes
  }));

  const loggingSystem = new _logging2.default(logging);
  loggingSystem.addHandler(_createSpaceHandler4.default);

  const eventSystem = new _events.EventSystem();
  eventSystem.attachSubsystem(intentSystem);
  eventSystem.attachSubsystem(loggingSystem);

  const dispatcher = eventSystem.dispatcher(_scopes.CREATE_SPACE_HANDLER);

  if (!organizationId) {
    const result = await client.getOrganizations();

    if (result.items.length > 1) {
      dispatcher.dispatch('MULTIPLE_ORG_MEMBERSHIP');

      const organizationChoices = result.items.sort((a, b) => a.name.localeCompare(b.name)).map(organization => ({
        name: `${organization.name} (${organization.sys.id})`,
        value: organization.sys.id
      }), {});

      organizationId = await dispatcher.intent('SELECT_ORG', {
        organizations: organizationChoices
      });
    }
  }

  const space = await client.createSpace({
    name,
    defaultLocale
  }, organizationId);

  if (use) {
    await (0, _use.spaceUse)({ spaceId: space.sys.id });
  }

  dispatcher.dispatch('SPACE_CREATED', { space });

  return space;
}

const handler = exports.handler = (0, _async.handleAsyncError)(spaceCreate);