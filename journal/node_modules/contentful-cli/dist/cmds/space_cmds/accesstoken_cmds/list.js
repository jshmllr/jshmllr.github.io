'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.aliases = exports.builder = exports.desc = exports.command = undefined;

var _cliTable = require('cli-table3');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _async = require('../../../utils/async');

var _contentfulClients = require('../../../utils/contentful-clients');

var _log = require('../../../utils/log');

var _pagination = require('../../../utils/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'list';

const desc = exports.desc = 'List your delivery access tokens';
const epilog = ['See more at:\nhttps://github.com/contentful/contentful-cli/tree/master/docs/space/accesstoken/list', 'Copyright 2018 Contentful, this is a BETA release'].join('\n');

const builder = exports.builder = yargs => {
  return yargs.option('management-token', {
    alias: 'mt',
    describe: 'Contentful management API token',
    type: 'string'
  }).option('space-id', { alias: 's', type: 'string', describe: 'Space id' }).usage('Usage: contentful space accesstoken list').epilog(epilog);
};

const aliases = exports.aliases = ['ls'];

async function accessTokenList({ context }) {
  const { managementToken, activeSpaceId } = context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'space-access_token-list'
  });

  const space = await client.getSpace(activeSpaceId);
  const result = await (0, _pagination2.default)({ client: space, method: 'getApiKeys' });

  const tokens = result.items.sort((a, b) => a.name.localeCompare(b.name));

  const table = new _cliTable2.default({
    head: ['Name', 'Description', 'Token']
  });

  tokens.forEach(token => {
    table.push([token.name, token.description, token.accessToken]);
  });

  (0, _log.log)(table.toString());
}

const handler = exports.handler = (0, _async.handleAsyncError)(accessTokenList);