'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash');

var _fs3 = require('../../../utils/fs');

var _convertFieldType = require('./convert-field-type');

var _error = require('../../../utils/error');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async function prepareData(argv) {
  const descriptor = (await getDescriptor(argv.descriptor)) || {};
  const args = getExtensionData(argv);
  const descriptorArgs = getExtensionData(descriptor);

  // Enable overwriting the src or srcdoc via command arguments.
  // Will allow passing localhost as src for development and
  // using a html file via srcdoc for production.
  if ('src' in args || 'srcdoc' in args) {
    delete descriptorArgs.src;
    delete descriptorArgs.srcdoc;
  }

  return (0, _lodash.omitBy)({
    id: argv.id || descriptor.id,
    extension: (0, _lodash.assign)({}, descriptorArgs, args),
    parameters: getInstallationParameterValues(argv)
  }, _lodash.isUndefined);
};

async function getDescriptor(filepath) {
  const DEFAULT_PATH = './extension.json';
  const path = filepath || _fs2.default.existsSync(DEFAULT_PATH) && DEFAULT_PATH;

  if (path) {
    const file = await (0, _fs3.readFileP)(path, 'utf8');

    try {
      return JSON.parse(file);
    } catch (e) {
      throw new _error.ValidationError('Error parsing descriptor file');
    }
  }
}

function getExtensionData(data) {
  return (0, _lodash.omitBy)({
    name: data.name,
    fieldTypes: data.fieldTypes ? data.fieldTypes.map(_convertFieldType.getFieldType) : undefined,
    src: data.src,
    srcdoc: data.srcdoc,
    sidebar: data.sidebar,
    parameters: data.parameters
  }, _lodash.isUndefined);
}

function getInstallationParameterValues(data) {
  if (data.installationParameters) {
    try {
      return JSON.parse(data.installationParameters);
    } catch (e) {
      throw new _error.ValidationError('Could not parse JSON string of installation parameter values');
    }
  }
}