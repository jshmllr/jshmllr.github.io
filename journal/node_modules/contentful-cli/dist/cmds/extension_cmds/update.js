'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.desc = exports.command = undefined;
exports.updateExtension = updateExtension;
exports.updateExtensionHandler = updateExtensionHandler;

var _async = require('../../utils/async');

var _contentfulClients = require('../../utils/contentful-clients');

var _emojis = require('../../utils/emojis');

var _log = require('../../utils/log');

var _create = require('./create');

var _assertions = require('./utils/assertions');

var _logAsTable = require('./utils/log-as-table');

var _prepareData = require('./utils/prepare-data');

var _prepareData2 = _interopRequireDefault(_prepareData);

var _readSrcdocFile = require('./utils/read-srcdoc-file');

var _readSrcdocFile2 = _interopRequireDefault(_readSrcdocFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = exports.command = 'update';

const desc = exports.desc = 'Update an extension';

const builder = exports.builder = yargs => {
  return yargs.option('id', { type: 'string', describe: 'Extension id' }).option('name', { type: 'string', describe: 'Extension name' }).option('management-token', { alias: 'mt', type: 'string', describe: 'Contentful management API token' }).option('space-id', { type: 'string', describe: 'Space id' }).option('environment-id', { type: 'string', describe: 'Environment id' }).option('field-types', { type: 'array', describe: 'Field types' }).option('descriptor', { type: 'string', describe: 'Path to an extension descriptor file' }).option('src', { type: 'string', describe: 'URL to extension bundle' }).option('srcdoc', { type: 'string', describe: 'Path to extension bundle' }).option('sidebar', {
    type: 'boolean',
    // We set the default to undefined so the descriptor file value will be
    // used instead of arg value unless explicitly passed in
    default: undefined,
    describe: 'Render the extension in the sidebar'
  }).option('version', {
    type: 'number',
    describe: 'Current version of the extension for optimistic locking'
  }).option('force', {
    type: 'boolean',
    describe: 'Force operation without explicit version'
  }).option('installation-parameters', {
    type: 'string',
    describe: 'JSON string of installation parameter key-value pairs'
  }).epilog('Copyright 2018 Contentful, this is a BETA release');
};

async function updateExtension(extension, data) {
  extension.extension = data.extension;
  extension.parameters = data.parameters;

  const updated = await extension.update();

  return updated;
}

async function updateExtensionHandler(argv) {
  const data = await (0, _prepareData2.default)(argv);

  await (0, _assertions.assertExtensionValuesProvided)(data, 'update');

  if (data.extension.srcdoc) {
    await (0, _readSrcdocFile2.default)(data.extension);
  }

  const { managementToken, activeSpaceId, activeEnvironmentId } = argv.context;

  const client = await (0, _contentfulClients.createManagementClient)({
    accessToken: managementToken,
    feature: 'extension-update'
  });

  const space = await client.getSpace(activeSpaceId);
  const environment = await space.getEnvironment(activeEnvironmentId);

  let extension = null;
  let operation = 'update';

  try {
    extension = await environment.getUiExtension(data.id);
  } catch (e) {
    if (argv.force) {
      operation = 'create';
    } else {
      throw e;
    }
  }

  if (operation === 'update' && extension) {
    await (0, _assertions.assertForceOrCorrectVersionProvided)(argv, extension.sys.version);

    const updated = await updateExtension(extension, data);

    (0, _log.success)(`${_emojis.successEmoji} Successfully updated extension:\n`);

    (0, _logAsTable.logExtension)(updated, activeSpaceId, activeEnvironmentId);
  } else if (operation === 'create') {
    const created = await (0, _create.createExtension)(environment, data);

    (0, _log.success)(`${_emojis.successEmoji} Successfully created extension:\n`);

    (0, _logAsTable.logExtension)(created, activeSpaceId, activeEnvironmentId);
  }
}

const handler = exports.handler = (0, _async.handleAsyncError)(updateExtensionHandler);