"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_validator_1 = __importDefault(require("./schema-validator"));
const Joi = __importStar(require("joi"));
class ContentTransformIntentValidator extends schema_validator_1.default {
    constructor() {
        super(...arguments);
        this.article = 'a';
        this.displayName = 'content transformation';
    }
    appliesTo(step) {
        return step.isContentTransform();
    }
    // NOTE: this could be change to return the object to
    // validate against the schema instead of returning
    // just the prop name
    get propertyNameToValidate() {
        return 'transformation';
    }
    get schema() {
        return {
            contentType: Joi.string().required(),
            from: Joi.array().items(Joi.string()).required(),
            to: Joi.array().items(Joi.string()).required(),
            transformEntryForLocale: Joi.func().required(),
            shouldPublish: Joi.alternatives().try([Joi.boolean(), Joi.string().valid(['preserve'])])
        };
    }
}
exports.default = ContentTransformIntentValidator;
//# sourceMappingURL=content-transform.js.map