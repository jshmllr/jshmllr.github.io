"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
const _ = __importStar(require("lodash"));
const url = __importStar(require("url"));
function parseAuth(authString) {
    // authString may be a falsy value like `null`
    const [username, password] = (authString || '').split(':');
    return { username, password };
}
function proxyStringToObject(proxyString) {
    if (!proxyString.startsWith('http')) {
        return proxyStringToObject(`http://${proxyString}`);
    }
    const { hostname: host, port: portString, auth: authString, protocol } = url.parse(proxyString);
    const auth = parseAuth(authString);
    const port = _.toInteger(portString);
    const isHttps = protocol === 'https:';
    if (!auth.username) {
        return { host, port, isHttps };
    }
    return {
        host,
        port,
        auth,
        isHttps
    };
}
exports.proxyStringToObject = proxyStringToObject;
// TODO: should use @types/node ProcessEnv interface
function loadProxyFromEnv(env) {
    const proxyString = env['https_proxy'] ||
        env['HTTPS_PROXY'] ||
        env['http_proxy'] ||
        env['HTTP_PROXY'] ||
        env['CONTENTFUL_PROXY'];
    // Delete all potential proxy keys `axios` might use
    delete env['http_proxy'];
    delete env['HTTP_PROXY'];
    delete env['https_proxy'];
    delete env['HTTPS_PROXY'];
    if (!proxyString) {
        return;
    }
    env['CONTENTFUL_PROXY'] = proxyString;
    return proxyStringToObject(proxyString);
}
exports.loadProxyFromEnv = loadProxyFromEnv;
function agentFromProxy(proxy) {
    if (!proxy) {
        return {};
    }
    const { host, port, auth } = proxy;
    let agentAuth;
    if (auth) {
        const { username, password } = auth;
        agentAuth = `${username}:${password}`;
    }
    const agent = new https_proxy_agent_1.default({ host, port, auth: agentAuth });
    return { httpsAgent: agent };
}
exports.agentFromProxy = agentFromProxy;
//# sourceMappingURL=proxy.js.map