"use strict";
var visit = require("unist-util-visit");
var prettier_1 = require("prettier");
var core_1 = require("@babel/core");
function insertAt(array, index, item) {
    return array.slice(0, index).concat([item], array.slice(index));
}
function isReactComponent(node, tag) {
    return node && node.type === 'jsx' && node.value === tag;
}
module.exports = function visitor(_a, _b) {
    var markdownAST = _a.markdownAST;
    var _c = _b === void 0 ? {} : _b, wrapperComponent = _c.wrapperComponent, _d = _c.prettierOptions, prettierOptions = _d === void 0 ? { parser: 'babel' } : _d;
    visit(markdownAST, 'code', function (node, index, parent) {
        if (/tsx?/.test(node.lang)) {
            var prevNode = parent.children[index - 1];
            var nextNode = parent.children[index + 1];
            if (wrapperComponent) {
                var isWrapped = isReactComponent(prevNode, "<" + wrapperComponent + ">") &&
                    isReactComponent(nextNode, "</" + wrapperComponent + ">");
                if (!isWrapped) {
                    return;
                }
            }
            try {
                var code = core_1.transformSync(node.value, {
                    filename: "file." + node.lang,
                    retainLines: true,
                    presets: ['@babel/typescript']
                }).code;
                if (code.trim()) {
                    parent.children = insertAt(parent.children, index + 1, {
                        type: 'code',
                        lang: /x$/.test(node.lang) ? 'jsx' : 'js',
                        value: prettier_1.format(code, prettierOptions).trim()
                    });
                }
            }
            catch (error) {
                console.error(error.message);
            }
        }
    });
    return markdownAST;
};
